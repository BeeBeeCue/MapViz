import { MapEnv } from "@here/harp-datasource-protocol/index-decoder";
import { OmvFeatureFilterDescription, OmvFilterDescription, OmvFilterFeatureAttribute, OmvFilterString, OmvGeometryType } from "./OmvDecoderDefs";
/**
 * The `OmvFeatureFilter` is designed to work in an `OmvVisitor`/`visitOmv` combination (for
 * example, `OmvDecoder`).
 *
 * @remarks
 * Returning `false` from any of the calls terminates processing of that
 * layer or feature.
 *
 * The `OmvFeatureFilter` is an "early-opt-out" filter, which cannot filter individual features,
 * because at that point the features are not really decoded. Use the [[OmvFeatureModifier]] to
 * filter for individual features.
 */
export interface OmvFeatureFilter {
    /**
     * Returns `true` if the filter contains rules for specific kinds.
     */
    hasKindFilter: boolean;
    /**
     * Return `false` if the layer should not be processed.
     *
     * @param layer - Current layer.
     * @param level - Level of tile.
     */
    wantsLayer(layer: string, level: number): boolean;
    /**
     * Return `false` if the point feature should not be processed.
     *
     * @param layer - Current layer.
     * @param feature - Current feature.
     * @param level - Level of tile.
     */
    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;
    /**
     * Return `false` if the line feature should not be processed.
     *
     * @param layer - Current layer.
     * @param feature - Current feature.
     * @param level - Level of tile.
     */
    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;
    /**
     * Return `false` if the polygon feature should not be processed.
     *
     * @param layer - Current layer.
     * @param feature - Current feature.
     * @param level - Level of tile.
     */
    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;
    /**
     * Return `false` if kind of object is not enabled and the geometry should not be created.
     *
     * @param {(string | string[])} kind Tag "kind" of the tag.
     * @returns {boolean}
     */
    wantsKind(kind: string | string[]): boolean;
}
/**
 * The `OmvFeatureModifier` can be used to filter individual features.
 *
 * @remarks
 * It gets passed in the `Env`
 * of the feature, which contains all the values that can be searched for in a style. If a filter
 * function returns false, the feature is ignored, and no geometry is being created.
 *
 * In addition to pure filtering, the `OmvFeatureModifier` can also modify the [[Env]] of the
 * feature, or even add new properties to the feature, for example, traffic states. The
 * `OmvFeatureModifier` is executed before the styles are selected, so the geometry is created with
 * the modified feature properties.
 */
export interface OmvFeatureModifier {
    /**
     * Check if the point feature described by `env` should be processed. The properties can be
     * modified or added to.
     *
     * @param layer - Current layer.
     * @param env - Properties of point feature.
     * @param level - Level of tile.
     * @returns `false` to ignore feature.
     */
    doProcessPointFeature(layer: string, env: MapEnv, level: number): boolean;
    /**
     * Check if the line feature described by `env` should be processed. The properties can be
     * modified or added to.
     *
     * @param layer - Current layer.
     * @param env - Properties of line feature.
     * @param level - Level of tile.
     * @returns `false` to ignore feature.
     */
    doProcessLineFeature(layer: string, env: MapEnv, level: number): boolean;
    /**
     * Check if the polygon feature described by `env` should be processed. The properties can be
     * modified or added to.
     *
     * @param layer - Current layer.
     * @param env - Properties of polygon feature.
     * @param level - Level of tile.
     * @returns `false` to ignore feature.
     */
    doProcessPolygonFeature(layer: string, env: MapEnv, level: number): boolean;
}
/**
 * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as well
 * as an [[OmvFeatureModifier]].
 *
 */
export declare class OmvFeatureFilterDescriptionBuilder {
    private readonly m_processLayersDefault;
    private readonly m_processPointsDefault;
    private readonly m_processLinesDefault;
    private readonly m_processPolygonsDefault;
    private readonly m_layersToProcess;
    private readonly m_layersToIgnore;
    private readonly m_pointsToProcess;
    private readonly m_ignoredPoints;
    private readonly m_linesToProcess;
    private readonly m_linesToIgnore;
    private readonly m_polygonsToProcess;
    private readonly m_polygonsToIgnore;
    private m_kindsToProcess;
    private m_kindsToIgnore;
    /**
     * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as
     * well as an [[OmvFeatureModifier]].
     *
     * @param processLayersDefault - If `true`, all unspecified layers will be processed.
     * If `false`, all unspecified layers will be ignored.
     * @param processPointsDefault - If `true`, all unspecified point features will be processed. If
     * `false`, all unspecified point features will be ignored.
     * @param processLinesDefault - If `true`, all unspecified line features will be processed. If
     * `false`, all unspecified line features will be ignored.
     * @param processPolygonsDefault - If `true`, all unspecified polygon features will be
     * processed. If `false`, all unspecified polygon features will be ignored.
     */
    constructor(options?: OmvFeatureFilterDescriptionBuilder.OmvFeatureFilterDescriptionBuilderOptions);
    /**
     * Add a layer that should be processed.
     *
     * @param layer - Layer name to be matched.
     * @param match - Match condition.
     */
    processLayer(layer: string, match?: OmvFilterString.StringMatch, minLevel?: number, maxLevel?: number): void;
    /**
     * Add a layer that should be ignored.
     *
     * @param layer - Layer name to be matched.
     * @param match - Match condition.
     */
    ignoreLayer(layer: string, match?: OmvFilterString.StringMatch, minLevel?: number, maxLevel?: number): void;
    /**
     * Add a valid point feature.
     *
     * @param options - Feature options.
     */
    processPoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption): void;
    /**
     * Add valid point features.
     *
     * @param options - Multi feature options.
     */
    processPoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption): void;
    /**
     * Add a point feature that should be ignored.
     *
     * @param options - Feature options.
     */
    ignorePoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption): void;
    /**
     * Add point features that should be ignored.
     *
     * @param options - Multi feature options.
     */
    ignorePoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption): void;
    /**
     * Add a valid line feature.
     *
     * @param options - Feature options.
     */
    processLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption): void;
    /**
     * Add valid line features.
     *
     * @param options - Multi feature options.
     */
    processLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption): void;
    /**
     * Ignore a line feature.
     *
     * @param options - Feature options.
     */
    ignoreLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption): void;
    /**
     * Ignore line features.
     *
     * @param options - Multi feature options.
     */
    ignoreLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption): void;
    /**
     * Add a valid polygon feature.
     *
     * @param options - Feature options.
     */
    processPolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption): void;
    /**
     * Add valid polygon features.
     *
     * @param options - Multi feature options.
     */
    processPolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption): void;
    /**
     * Ignore a valid polygon feature.
     *
     * @param options - Feature options.
     */
    ignorePolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption): void;
    /**
     * Ignore polygon features.
     *
     * @param options - Multi feature options.
     */
    ignorePolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption): void;
    /**
     * Add all the specified strings as "enabledKinds".
     *
     * @param {string[]} enabledKinds List of kinds that should be generated.
     */
    processKinds(enabledKinds: string[]): void;
    /**
     * Add all the specified strings as "disabledKinds".
     *
     * @param {string[]} disabledKinds List of kinds that should _not_ be generated.
     */
    ignoreKinds(disabledKinds: string[]): void;
    /**
     * Create a filter description that can be passed as an option to the [[OmvDataSource]].
     */
    createDescription(): OmvFeatureFilterDescription;
    private addItem;
    private addItems;
}
export declare namespace OmvFeatureFilterDescriptionBuilder {
    /**
     * Options for `OmvFeatureFilterDescriptionBuilder`.
     */
    interface OmvFeatureFilterDescriptionBuilderOptions {
        /**
         * If `true`, all unspecified layers will be processed. If `false`, all unspecified layers
         * will be ignored.
         */
        processLayersDefault?: boolean;
        /**
         * If `true`, all unspecified point features will be processed. If `false`, all unspecified
         * point features will be ignored.
         */
        processPointsDefault?: boolean;
        /**
         * If `true`, all unspecified line features will be processed. If `false`, all unspecified
         * line
         * features will be ignored.
         */
        processLinesDefault?: boolean;
        /**
         * If `true`, all unspecified polygon features will be processed. If `false`, all
         * unspecified polygon features will be ignored.
         */
        processPolygonsDefault?: boolean;
    }
    /**
     * Description of a single feature.
     */
    interface FeatureOption {
        /**
         * Layer name to be matched.
         */
        layer: string;
        /**
         * Optional geometry type to be limited to. If specified, but does not match, the feature is
         * ignored.
         */
        geomType: OmvGeometryType | OmvGeometryType[] | undefined;
        /**
         * Optional class to match. If specified, but does not match, the feature is ignored.
         */
        featureClass: string;
        /**
         * Match condition for the layer name.
         */
        matchLayer?: OmvFilterString.StringMatch;
        /**
         * Match condition for `featureClass`.
         */
        matchClass?: OmvFilterString.StringMatch;
        /**
         * Minimum tile level to match.
         */
        minLevel?: number;
        /**
         * Maximum tile level to match.
         */
        maxLevel?: number;
        /**
         * Feature attribute to match.
         */
        featureAttribute?: OmvFilterFeatureAttribute;
    }
    /**
     * Description for multiple features.
     */
    interface MultiFeatureOption {
        /**
         * Layer name to be matched.
         */
        layer: string;
        /**
         * Optional geometry type to be limited to. If specified, but does not match, the feature is
         * ignored.
         */
        geomTypes?: OmvGeometryType | OmvGeometryType[] | undefined;
        /**
         * Optional classes to match. If specified, but does not match, the feature is ignored.
         */
        featureClasses?: OmvFilterString[];
        /**
         * Match condition for the layer name.
         */
        matchLayer?: OmvFilterString.StringMatch;
        /**
         * Minimum tile level to match.
         */
        minLevel?: number;
        /**
         * Maximum tile level to match.
         */
        maxLevel?: number;
        /**
         * Feature attribute to match.
         */
        featureAttribute?: OmvFilterFeatureAttribute;
    }
}
/**
 * `OmvFeatureFilter` implementation that uses a `OmvFeatureFilterDescription` to filter `TileData`
 * features before they are completely decoded.
 *
 * @internal
 */
export declare class OmvGenericFeatureFilter implements OmvFeatureFilter {
    private readonly description;
    private static matchLayer;
    private readonly disabledKinds;
    private readonly enabledKinds;
    constructor(description: OmvFeatureFilterDescription);
    wantsLayer(layer: string, level: number): boolean;
    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;
    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;
    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;
    wantsKind(kind: string | string[]): boolean;
    get hasKindFilter(): boolean;
    private wantsFeature;
}
/**
 * An [[OmvFeatureFilter]] implementation that delegates all filter decision
 * returning `true` for any predicate if all delegates return `true`.
 *
 * @internal
 */
export declare class ComposedDataFilter implements OmvFeatureFilter {
    readonly filters: OmvFeatureFilter[];
    constructor(filters: OmvFeatureFilter[]);
    get hasKindFilter(): boolean;
    wantsLayer(layer: string, level: number): boolean;
    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;
    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;
    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;
    wantsKind(kind: string | string[]): boolean;
}
/**
 * `OmvFeatureModifier` implementation that uses a `OmvFeatureFilterDescription` to filter
 * `TileData` features before they are completely decoded.
 *
 * @internal
 */
export declare class OmvGenericFeatureModifier implements OmvFeatureModifier {
    private readonly description;
    static matchItems(layerName: string, featureClass: string, items: OmvFilterDescription[]): boolean;
    static matchAttribute(layerName: string, env: MapEnv, items: OmvFilterDescription[]): boolean;
    constructor(description: OmvFeatureFilterDescription);
    doProcessPointFeature(layer: string, env: MapEnv): boolean;
    doProcessLineFeature(layer: string, env: MapEnv): boolean;
    doProcessPolygonFeature(layer: string, env: MapEnv): boolean;
    protected doProcessFeature(itemsToProcess: OmvFilterDescription[], itemsToIgnore: OmvFilterDescription[], layer: string, env: MapEnv, defaultResult: boolean): boolean;
}
//# sourceMappingURL=OmvDataFilter.d.ts.map