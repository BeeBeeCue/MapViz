import { ITileDecoder } from "@here/harp-datasource-protocol";
import { TileKey } from "@here/harp-geoutils";
import { CopyrightInfo, CopyrightProvider, DataSourceOptions, Tile } from "@here/harp-mapview";
import { DataProvider, TileDataSource, TileFactory } from "@here/harp-mapview-decoder";
import { FeatureModifierId, OmvFeatureFilterDescription } from "./OmvDecoderDefs";
import { OmvRestClientParameters } from "./OmvRestClient";
export interface VectorTileFactory {
    /** Create an instance of {@link @here/harp-mapview#Tile} or a subclass. */
    createTile(dataSource: VectorTileDataSource, tileKey: TileKey): Tile;
}
export interface VectorTileDataSourceParameters extends DataSourceOptions {
    /**
     * If set to `true`, features that have no technique in the theme will be printed to the console
     * (can be excessive!).
     */
    showMissingTechniques?: boolean;
    /**
     * @deprecated Tile info is not decoded anymore. The same information can be generated
     * implementing a [[IGeometryProcessor]] and using [[OmvProtobufDataAdapter]] to decode OMV
     * data.
     */
    createTileInfo?: boolean;
    /**
     * Specify the decoder that should be used. If not supplied, the default will be used.
     */
    decoder?: ITileDecoder;
    /**
     * Optionally specify the DataProvider that should be used.
     */
    dataProvider?: DataProvider;
    /**
     * Specify the URL to the decoder bundle. If not supplied, the default will be used.
     */
    concurrentDecoderScriptUrl?: string;
    /**
     * Gather feature IDs from `OmvData`. Defaults to `false`.
     * @deprecated FeatureIds are always gathered, use [[gatherFeatureAttributes]] to gather
     * all feature attributes.
     */
    gatherFeatureIds?: boolean;
    /**
     * Gather feature attributes from `OmvData`. Defaults to `false`.
     */
    gatherFeatureAttributes?: boolean;
    /**
     * @deprecated Tile info is not decoded anymore. The same information can be generated
     * implementing a [[IGeometryProcessor]] and using [[OmvProtobufDataAdapter]] to decode OMV
     * data.
     */
    gatherRoadSegments?: boolean;
    /**
     * If not set to `false`, very short text labels will be skipped during decoding based on a
     * heuristic.
     */
    skipShortLabels?: boolean;
    /**
     * A description for the feature filter that can be safely passed down to the web workers.
     *
     * @remarks
     * It has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]]
     * (to guarantee correctness). This parameter gets applied to the decoder used in the
     * {@link VectorTileDataSource} which might be shared between
     * various {@link VectorTileDataSource}s.
     */
    filterDescr?: OmvFeatureFilterDescription;
    /**
     * Optional, custom factory for {@link @here/harp-mapview#Tile} instances created
     * by this {@link VectorTileDataSource}.
     */
    tileFactory?: TileFactory<Tile>;
    /**
     * Identifier used to choose [[OmvFeatureModifier]]s to be applied.
     *
     * @remarks
     * If left `undefined` at least [[OmvGenericFeatureModifier]] will be applied.
     * The list of feature modifiers may be extended internally by some data source options
     * such as [[politicalView]] which adds [[OmvPoliticalViewFeatureModifier]].
     *
     * @note This parameter gets applied to the decoder used in the {@link VectorTileDataSource}
     * which might be shared between various {@link VectorTileDataSource}s.
     */
    featureModifierId?: FeatureModifierId;
    /**
     * Expresses specific country point of view that is used when rendering disputed features,
     * like borders, names, etc. If undefined "defacto" or most widely accepted political view
     * will be presented.
     *
     * @see featureModifiers
     */
    politicalView?: string;
    /**
     * Optional, default copyright information of tiles provided by this data source.
     * Implementation should provide this information from the source data if possible.
     */
    copyrightInfo?: CopyrightInfo[];
    /**
     * Optional copyright info provider for tiles provided by this data source.
     */
    copyrightProvider?: CopyrightProvider;
    /**
     * Indicates whether overlay on elevation is enabled. Defaults to `false`.
     */
    enableElevationOverlay?: boolean;
    /**
     * Indicates whether to add a ground plane to cover the tile completely.
     *
     * @remarks
     * This is necessary for the fallback logic, such that the parent fall back tiles don't
     * overlap the children tiles.
     * Default is true (i.e. if not defined it is taken to be true)
     */
    addGroundPlane?: boolean;
    /**
     * Indicates whether the decoder is allowed to adjust the coordinates to
     * avoid possible glitches at the 180th meridian.
     *
     * @defaultValue `true` if the data service is
     *               `https://vector.hereapi.com/v2/vectortiles/base/mc`,
     *               `false` otherwise.
     */
    roundUpCoordinatesIfNeeded?: boolean;
}
export declare type OmvWithRestClientParams = VectorTileDataSourceParameters & OmvRestClientParameters;
export declare type OmvWithCustomDataProvider = VectorTileDataSourceParameters & {
    dataProvider: DataProvider;
};
/**
 * `VectorTileDataSource` is used for the visualization of vector tiles.
 *
 * @example
 * ```typescript
 *    const dataSource = new VectorTileDataSource({
 *        baseUrl: "https://vector.hereapi.com/v2/vectortiles/base/mc",
 *        authenticationCode: apikey
 *    });
 *    mapView.addDataSource(dataSource);
 *   ```
 */
export declare class VectorTileDataSource extends TileDataSource {
    private readonly m_params;
    private readonly m_decoderOptions;
    constructor(m_params: OmvWithRestClientParams | OmvWithCustomDataProvider);
    /** @override */
    connect(): Promise<void>;
    /**
     * Remove the current data filter.
     * Will be applied to the decoder, which might be shared with other omv datasources.
     */
    removeDataFilter(): void;
    /**
     * Set a new data filter. Can also be done during
     * the creation of an {@link VectorTileDataSource}.
     * Will be applied to the decoder, which might be shared with other omv datasources.
     *
     * @param filterDescription - Data filter description created with
     * [[OmvFeatureFilterDescriptionBuilder]].
     */
    setDataFilter(filterDescription: OmvFeatureFilterDescription): void;
    /** @override */
    shouldPreloadTiles(): boolean;
    /** @override */
    setLanguages(languages?: string[]): void;
    /** @override */
    setPoliticalView(politicalView?: string): void;
    /** @override */
    get storageLevelOffset(): number;
    /** @override */
    set storageLevelOffset(levelOffset: number);
    /** @override */
    setEnableElevationOverlay(enable: boolean): void;
    private configureDecoder;
}
//# sourceMappingURL=VectorTileDataSource.d.ts.map