"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.webMercatorTile2TargetTile = exports.webMercatorTile2TargetWorld = exports.world2tile = exports.tile2world = exports.createWorldTileTransformationCookie = exports.tile2lat = exports.lat2tile = exports.isArrayBufferLike = void 0;
/*
 * Copyright (C) 2017-2020 HERE Europe B.V.
 * Licensed under Apache 2.0, see full license in LICENSE
 * SPDX-License-Identifier: Apache-2.0
 */
const harp_geoutils_1 = require("@here/harp-geoutils");
const THREE = require("three");
/**
 * @hidden
 */
function isArrayBufferLike(data) {
    if (typeof SharedArrayBuffer !== "undefined") {
        return data instanceof ArrayBuffer || data instanceof SharedArrayBuffer;
    }
    else {
        return data instanceof ArrayBuffer;
    }
}
exports.isArrayBufferLike = isArrayBufferLike;
/**
 * @hidden
 */
function lat2tile(lat, zoom) {
    return Math.round(((1 -
        Math.log(Math.tan((lat * Math.PI) / 180) + 1 / Math.cos((lat * Math.PI) / 180)) /
            Math.PI) /
        2) *
        Math.pow(2, zoom));
}
exports.lat2tile = lat2tile;
/**
 * @hidden
 */
function tile2lat(y, level) {
    const n = Math.PI - (2 * Math.PI * y) / Math.pow(2, level);
    return (180 / Math.PI) * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));
}
exports.tile2lat = tile2lat;
function createWorldTileTransformationCookie(extents, decodeInfo) {
    const { north, west } = decodeInfo.geoBox;
    const N = Math.log2(extents);
    const scale = Math.pow(2, decodeInfo.tileKey.level + N);
    return {
        extents,
        scale,
        top: lat2tile(north, decodeInfo.tileKey.level + N),
        left: Math.round(((west + 180) / 360) * scale)
    };
}
exports.createWorldTileTransformationCookie = createWorldTileTransformationCookie;
/**
 * @hidden
 */
function tile2world(extents, decodeInfo, position, flipY = false, target) {
    if (decodeInfo.worldTileProjectionCookie === undefined ||
        decodeInfo.worldTileProjectionCookie.extents !== extents) {
        decodeInfo.worldTileProjectionCookie = createWorldTileTransformationCookie(extents, decodeInfo);
    }
    const { top, left, scale } = decodeInfo.worldTileProjectionCookie;
    const R = harp_geoutils_1.EarthConstants.EQUATORIAL_CIRCUMFERENCE;
    return target.set(((left + position.x) / scale) * R, ((top + (flipY ? -position.y : position.y)) / scale) * R);
}
exports.tile2world = tile2world;
/**
 * @hidden
 */
function world2tile(extents, decodeInfo, position, flipY = false, target) {
    if (decodeInfo.worldTileProjectionCookie === undefined ||
        decodeInfo.worldTileProjectionCookie.extents !== extents) {
        decodeInfo.worldTileProjectionCookie = createWorldTileTransformationCookie(extents, decodeInfo);
    }
    const { top, left, scale } = decodeInfo.worldTileProjectionCookie;
    const R = harp_geoutils_1.EarthConstants.EQUATORIAL_CIRCUMFERENCE;
    return target.set((position.x / R) * scale - left, (flipY ? -1 : 1) * ((position.y / R) * scale - top));
}
exports.world2tile = world2tile;
const tempWorldPos = new THREE.Vector2();
function webMercatorTile2TargetWorld(extents, decodeInfo, position, target, flipY = false) {
    const worldPos = tile2world(extents, decodeInfo, position, flipY, tempWorldPos);
    target.set(worldPos.x, worldPos.y, 0);
    decodeInfo.targetProjection.reprojectPoint(harp_geoutils_1.webMercatorProjection, target, target);
}
exports.webMercatorTile2TargetWorld = webMercatorTile2TargetWorld;
function webMercatorTile2TargetTile(extents, decodeInfo, position, target, flipY = false) {
    webMercatorTile2TargetWorld(extents, decodeInfo, position, target, flipY);
    target.sub(decodeInfo.center);
}
exports.webMercatorTile2TargetTile = webMercatorTile2TargetTile;
//# sourceMappingURL=OmvUtils.js.map