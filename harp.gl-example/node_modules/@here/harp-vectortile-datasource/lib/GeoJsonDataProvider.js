"use strict";
/*
 * Copyright (C) 2017-2020 HERE Europe B.V.
 * Licensed under Apache 2.0, see full license in LICENSE
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeoJsonDataProvider = void 0;
require("@here/harp-fetch");
const harp_datasource_protocol_1 = require("@here/harp-datasource-protocol");
const harp_mapview_1 = require("@here/harp-mapview");
const harp_mapview_decoder_1 = require("@here/harp-mapview-decoder");
const harp_utils_1 = require("@here/harp-utils");
const OmvDecoderDefs_1 = require("./OmvDecoderDefs");
const logger = harp_utils_1.LoggerManager.instance.create("GeoJsonDataProvider");
const INVALIDATED = "invalidated";
let missingTilerServiceInfoEmitted = false;
/**
 * GeoJson {@link @here/harp-mapview-decoder@DataProvider}.
 *
 * @remarks
 * Automatically handles tiling and simplification of static GeoJson.
 */
class GeoJsonDataProvider extends harp_mapview_decoder_1.DataProvider {
    /**
     * Constructs a new `GeoJsonDataProvider`.
     *
     * @param name - Name to be used to reference this `DataProvider`
     * @param input - URL of the GeoJSON, or a GeoJSON.
     * @param options - Optional
     * @returns New `GeoJsonDataProvider`.
     */
    constructor(name, input, options) {
        var _a;
        super();
        this.name = name;
        this.input = input;
        this.m_registered = false;
        this.m_tiler = (_a = options === null || options === void 0 ? void 0 : options.tiler) !== null && _a !== void 0 ? _a : harp_mapview_1.ConcurrentTilerFacade.getTiler(OmvDecoderDefs_1.GEOJSON_TILER_SERVICE_TYPE, options && options.workerTilerUrl);
    }
    async connect() {
        try {
            await this.m_tiler.connect();
        }
        catch (error) {
            if (harp_datasource_protocol_1.WorkerServiceProtocol.isUnknownServiceError(error) &&
                !missingTilerServiceInfoEmitted) {
                logger.info("Unable to start GeoJson tiler service in worker. Use " +
                    " 'OmvTilerService.start();' in decoder script.");
                missingTilerServiceInfoEmitted = true;
            }
            throw error;
        }
        await this.m_tiler.registerIndex(this.name, this.input);
        this.m_registered = true;
    }
    updateInput(input) {
        this.input = input;
        this.m_tiler.updateIndex(this.name, this.input);
        this.dispatchEvent({ type: INVALIDATED });
    }
    ready() {
        return this.m_registered;
    }
    async getTile(tileKey) {
        return await this.m_tiler.getTile(this.name, tileKey);
    }
    onDidInvalidate(listener) {
        this.addEventListener(INVALIDATED, listener);
        return () => this.removeEventListener(INVALIDATED, listener);
    }
    /**
     * Destroys this `GeoJsonDataProvider`.
     */
    dispose() {
        this.m_tiler.dispose();
    }
}
exports.GeoJsonDataProvider = GeoJsonDataProvider;
//# sourceMappingURL=GeoJsonDataProvider.js.map