import "@here/harp-fetch";
import { GeoJson, ITiler } from "@here/harp-datasource-protocol";
import { TileKey } from "@here/harp-geoutils";
import { DataProvider } from "@here/harp-mapview-decoder";
export interface GeoJsonDataProviderOptions {
    /**
     * Worker script hosting `Tiler` service.
     * @default `./decoder.bundle.ts`
     */
    workerTilerUrl?: string;
    /**
     * Custom tiler instance.
     *
     * @remarks
     * If not provided, {@link GeoJsonDataProvider} will obtain `WorkerBasedTiler`
     * from `ConcurrentTilerFacade`.
     */
    tiler?: ITiler;
}
/**
 * GeoJson {@link @here/harp-mapview-decoder@DataProvider}.
 *
 * @remarks
 * Automatically handles tiling and simplification of static GeoJson.
 */
export declare class GeoJsonDataProvider extends DataProvider {
    readonly name: string;
    input: URL | GeoJson;
    private readonly m_tiler;
    private m_registered;
    /**
     * Constructs a new `GeoJsonDataProvider`.
     *
     * @param name - Name to be used to reference this `DataProvider`
     * @param input - URL of the GeoJSON, or a GeoJSON.
     * @param options - Optional
     * @returns New `GeoJsonDataProvider`.
     */
    constructor(name: string, input: URL | GeoJson, options?: GeoJsonDataProviderOptions);
    connect(): Promise<void>;
    updateInput(input: URL | GeoJson): void;
    ready(): boolean;
    getTile(tileKey: TileKey): Promise<{}>;
    onDidInvalidate(listener: () => void): () => void;
    /**
     * Destroys this `GeoJsonDataProvider`.
     */
    dispose(): void;
}
//# sourceMappingURL=GeoJsonDataProvider.d.ts.map