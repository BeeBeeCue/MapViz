import { GeoBox, OrientedBox3, Projection, TileKey, TilingScheme } from "@here/harp-geoutils";
import * as THREE from "three";
import { WorldTileProjectionCookie } from "./OmvUtils";
export declare class DecodeInfo {
    readonly adapterId: string;
    readonly targetProjection: Projection;
    readonly tileKey: TileKey;
    readonly storageLevelOffset: number;
    /**
     * The [[GeoBox]] of the Tile to decode.
     */
    readonly geoBox: GeoBox;
    readonly projectedBoundingBox: OrientedBox3;
    /**
     * The tile bounds in the OMV tile space [[webMercatorTilingScheme]].
     */
    readonly tileBounds: THREE.Box3;
    /**
     * The tile size in the OMV tile space [[webMercatorTilingScheme]].
     */
    readonly tileSize: THREE.Vector3;
    /**
     * The center of the Tile in the target [[Projection]] space.
     * Geometries generated by decoding the OMV tile must be relative
     * to this position.
     */
    readonly center: THREE.Vector3;
    /**
     * @internal
     */
    worldTileProjectionCookie?: WorldTileProjectionCookie;
    /**
     * Estimated tile size in pixels.
     */
    readonly tileSizeOnScreen: number;
    /**
     * The maximum number of columns.
     */
    readonly columnCount: number;
    /**
     * The maximum number of rows.
     */
    readonly rowCount: number;
    /**
     * Constructs a new [[DecodeInfo]].
     *
     * @param adapterId - The id of the [[OmvDataAdapter]] used for decoding.
     * @param targetProjection - The [[Projection]]
     * @param tileKey - The [[TileKey]] of the Tile to decode.
     * @param storageLevelOffset - The storage level offset.
     */
    constructor(adapterId: string, targetProjection: Projection, tileKey: TileKey, storageLevelOffset?: number);
    /**
     * The [[TilingScheme]] of the OMV data, currenly it is defined
     * to be [[webMercatorTilingScheme]].
     */
    get tilingScheme(): TilingScheme;
    /**
     * The [[Projection]] of OMV tiled data, currenly it is defined
     * to be [[webMercatorProjection]].
     */
    get sourceProjection(): Projection;
}
//# sourceMappingURL=DecodeInfo.d.ts.map