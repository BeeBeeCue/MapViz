import { GeoBoxExtentLike } from "./GeoBoxExtentLike";
import { GeoCoordinates } from "./GeoCoordinates";
import { GeoCoordinatesLike } from "./GeoCoordinatesLike";
/**
 * `GeoBox` is used to represent a bounding box in geo coordinates.
 */
export declare class GeoBox implements GeoBoxExtentLike {
    readonly southWest: GeoCoordinates;
    readonly northEast: GeoCoordinates;
    /**
     * Returns a `GeoBox` with the given geo coordinates.
     *
     * @param southWest - The south west position in geo coordinates.
     * @param northEast - The north east position in geo coordinates.
     */
    static fromCoordinates(southWest: GeoCoordinates, northEast: GeoCoordinates): GeoBox;
    /**
     * Returns a `GeoBox` with the given center and dimensions.
     *
     * @param center - The center position of geo box.
     * @param extent - Box latitude and logitude span
     */
    static fromCenterAndExtents(center: GeoCoordinates, extent: GeoBoxExtentLike): GeoBox;
    /**
     * Constructs a new `GeoBox` with the given geo coordinates.
     *
     * @param southWest - The south west position in geo coordinates.
     * @param northEast - The north east position in geo coordinates.
     */
    constructor(southWest: GeoCoordinates, northEast: GeoCoordinates);
    /**
     * Returns the minimum altitude or `undefined`.
     */
    get minAltitude(): number | undefined;
    /**
     * Returns the maximum altitude or `undefined`.
     */
    get maxAltitude(): number | undefined;
    /**
     * Returns the south latitude in degrees of this `GeoBox`.
     */
    get south(): number;
    /**
     * Returns the north altitude in degrees of this `GeoBox`.
     */
    get north(): number;
    /**
     * Returns the west longitude in degrees of this `GeoBox`.
     */
    get west(): number;
    /**
     * Returns the east longitude in degrees of this `GeoBox`.
     */
    get east(): number;
    /**
     * Returns the center of this `GeoBox`.
     */
    get center(): GeoCoordinates;
    /**
     * Returns the latitude span in radians.
     */
    get latitudeSpanInRadians(): number;
    /**
     * Returns the longitude span in radians.
     */
    get longitudeSpanInRadians(): number;
    /**
     * Returns the latitude span in degrees.
     */
    get latitudeSpan(): number;
    get altitudeSpan(): number | undefined;
    /**
     * Returns the longitude span in degrees.
     */
    get longitudeSpan(): number;
    /**
     * Returns the latitude span in degrees.
     * @deprecated Use [[latitudeSpan]] instead.
     */
    get latitudeSpanInDegrees(): number;
    /**
     * Returns the longitude span in degrees.
     * @deprecated Use [[longitudeSpan]] instead.
     */
    get longitudeSpanInDegrees(): number;
    /**
     * Returns `true` if the given geo coordinates are contained in this `GeoBox`.
     *
     * @param point - The geo coordinates.
     */
    contains(point: GeoCoordinates): boolean;
    /**
     * Clones this `GeoBox` instance.
     */
    clone(): GeoBox;
    /**
     * Update the bounding box by considering a given point.
     *
     * @param point - The point that may expand the bounding box.
     */
    growToContain(point: GeoCoordinatesLike): void;
    private containsHelper;
}
//# sourceMappingURL=GeoBox.d.ts.map