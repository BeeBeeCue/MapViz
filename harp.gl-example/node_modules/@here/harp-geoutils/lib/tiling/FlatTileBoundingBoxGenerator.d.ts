import { GeoBox } from "../coordinates/GeoBox";
import { Box3Like } from "../math/Box3Like";
import { Projection } from "../projection/Projection";
import { SubdivisionScheme } from "./SubdivisionScheme";
import { TileKey } from "./TileKey";
import { TilingScheme } from "./TilingScheme";
/**
 * `FlatTileBoundingBoxGenerator` generates bounding boxes in world and geo coordinates for a given
 * TilingScheme.
 */
export declare class FlatTileBoundingBoxGenerator {
    readonly tilingScheme: TilingScheme;
    readonly minElevation: number;
    readonly maxElevation: number;
    private readonly m_tilingScheme;
    private readonly m_worldDimensions;
    private readonly m_worldBox;
    /**
     * Creates a new `FlatTileBoundingBoxGenerator` that can generate bounding boxes for the given
     * TilingScheme.
     *
     * @param tilingScheme - The {@link TilingScheme} used to compute bounding boxes.
     * @param minElevation - The minimum elevation in meters.
     * @param maxElevation - The maximum elevation in meters.
     */
    constructor(tilingScheme: TilingScheme, minElevation?: number, maxElevation?: number);
    /**
     * Returns the {@link Projection} of the {@link TilingScheme}.
     */
    get projection(): Projection;
    /**
     * Returns the {@link SubdivisionScheme} of the {@link TilingScheme}.
     */
    get subdivisionScheme(): SubdivisionScheme;
    /**
     * Returns the bounding box in world coordinates of the given {@link TileKey}.
     *
     * Example:
     * ```typescript
     * const worldBounds = new THREE.Box3();
     * generator.getWorldBox(geoBox, worldBounds);
     * console.log(worldBounds.getCenter());
     * ```
     *
     * @param tileKey - The TileKey.
     * @param result - The optional object used to store the resulting bounding box in world
     * coordinates.
     */
    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like;
    /**
     * Returns the bounding box in geo coordinates for the given {@link TileKey}.
     *
     * Example:
     * ```typescript
     * const geoBox = generator.getGeoBox(worldBounds);
     * console.log(geoBox.center);
     * ```
     *
     * @param tileKey - The {@link TileKey}.
     */
    getGeoBox(tileKey: TileKey): GeoBox;
}
//# sourceMappingURL=FlatTileBoundingBoxGenerator.d.ts.map