import { GeoBox } from "../coordinates/GeoBox";
import { GeoCoordinatesLike } from "../coordinates/GeoCoordinatesLike";
import { Box3Like } from "../math/Box3Like";
import { Projection } from "../projection/Projection";
import { FlatTileBoundingBoxGenerator } from "./FlatTileBoundingBoxGenerator";
import { SubdivisionScheme } from "./SubdivisionScheme";
import { TileKey } from "./TileKey";
import { TileTreeTraverse } from "./TileTreeTraverse";
/**
 * The `TilingScheme` represents how the data is tiled.
 */
export declare class TilingScheme {
    readonly subdivisionScheme: SubdivisionScheme;
    readonly projection: Projection;
    readonly boundingBoxGenerator: FlatTileBoundingBoxGenerator;
    readonly tileTreeTraverse: TileTreeTraverse;
    /**
     * Constructs a new `TilingScheme` with the given subdivision scheme and projection.
     *
     * @param subdivisionScheme - The subdivision scheme used by this `TilingScheme`.
     * @param projection - The projection used by this `TilingScheme`.
     */
    constructor(subdivisionScheme: SubdivisionScheme, projection: Projection);
    /**
     * Returns the sub tile keys of the given tile.
     *
     * @param tileKey - The {@link TileKey}.
     * @returns The list of the sub tile keys.
     */
    getSubTileKeys(tileKey: TileKey): Iterable<TileKey>;
    /**
     * Gets the {@link TileKey} from the given geo position and level.
     *
     * @param geoPoint - The position in geo coordinates.
     * @param level - The level of the resulting `TileKey`.
     */
    getTileKey(geoPoint: GeoCoordinatesLike, level: number): TileKey | null;
    /**
     * Gets the list of {@link TileKey}s contained in the given {@link GeoBox}.
     *
     * @param geoBox - The bounding box in geo coordinates.
     * @param level - The level of the resulting `TileKey`.
     */
    getTileKeys(geoBox: GeoBox, level: number): TileKey[];
    /**
     * Returns the bounding box in geo coordinates for the given {@link TileKey}.
     *
     * @param tileKey - The `TileKey`.
     */
    getGeoBox(tileKey: TileKey): GeoBox;
    /**
     * Returns the bounding box in world coordinates.
     *
     * @param tileKey - The `TileKey`.
     * @param result - The optional object that will contain the resulting bounding box.
     */
    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like;
}
//# sourceMappingURL=TilingScheme.d.ts.map