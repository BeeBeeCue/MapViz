import { GeoCoordinatesLike } from "../coordinates/GeoCoordinatesLike";
import { Projection } from "./Projection";
export declare class TransverseMercatorUtils {
    static POLE_EDGE: number;
    static POLE_EDGE_DEG: number;
    static POLE_RADIUS: number;
    static POLE_RADIUS_SQ: number;
    /**
     * There are two regions on projected space that have same geo coordinates,
     * it's the entire lines   { x: [0..1], y: 0 } and { x: [0..1], y: 1 }
     * they both have geo coordinates of   (0, [-90..+90])
     * and should be aligned somehow to fall into first or second region
     * to make proper bounding boxes, tile bounds, etc.
     */
    static alignLatitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void;
    /**
     * There are two regions on projected plane,
     * { x: 0.5, y: [0..0.25] }    and    { x: 0.5, y: [0.75..1] }
     * that represent longitude edge where -180 and +180 met.
     * Points falling in this regions should be aligned to get proper boxes etc.
     */
    static alignLongitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void;
}
/**
 * Transverse Mercator {@link Projection} used to convert geo coordinates to world coordinates
 * and vice versa.
 */
export declare const transverseMercatorProjection: Projection;
//# sourceMappingURL=TransverseMercatorProjection.d.ts.map