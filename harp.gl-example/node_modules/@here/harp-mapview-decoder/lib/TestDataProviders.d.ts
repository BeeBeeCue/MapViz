import "@here/harp-fetch";
import { TileKey } from "@here/harp-geoutils";
import { DataProvider } from "../lib/DataProvider";
/**
 * Data provider that loads test tile using [[loadTestResource]].
 */
export declare class TestSingleFileDataProvider extends DataProvider {
    private readonly moduleName;
    private readonly basePath;
    /**
     * TestDataProvider constructor
     * @param moduleName - name of the module's directory
     * @param basePath - base path to the test resources
     */
    constructor(moduleName: string, basePath: string);
    ready(): boolean;
    connect(): Promise<void>;
    getTile(_tileKey: TileKey, _abortSignal?: AbortSignal): Promise<ArrayBufferLike>;
    /** @override */ dispose(): void;
}
/**
 * Data provider that loads test tiles from a specified base URL.
 * Tile's URLs are generated basing on the basePath and requested tileKey.
 *
 * The URL is constructed using the following formula:
 * `${this.basePath}/${tileKey.mortonCode()}.bin`
 */
export declare class TestTilesDataProvider extends DataProvider {
    private readonly basePath;
    /**
     * Constructs `TestFilesDataProvider` using the provided base path.
     *
     * @param basePath - base path to be used to construct the url to the resource.
     */
    constructor(basePath: string);
    ready(): boolean;
    connect(): Promise<void>;
    /**
     * Loads the static test data from given URL and returns them as [[ArrayBufferLike]].
     *
     * @param tileKey - the tile key for the tile to be loaded
     * @param abortSignal - optional AbortSignal to be used by the fetch function
     */
    getTile(tileKey: TileKey, abortSignal?: AbortSignal): Promise<ArrayBufferLike>;
    /** @override */ dispose(): void;
}
//# sourceMappingURL=TestDataProviders.d.ts.map