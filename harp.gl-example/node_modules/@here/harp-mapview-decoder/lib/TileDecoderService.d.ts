import { ITileDecoder } from "@here/harp-datasource-protocol";
import { WorkerService, WorkerServiceResponse } from "./WorkerService";
/**
 * An extension to [[WorkerService]], the `TileDecoderService` implements an asynchronous
 * (message based) service to decode tile content in web workers. The `TileDecoderService` itself
 * lives in the web worker, and communicates with messages by means of a [[ConcurrentWorkerSet]]
 * with the application.
 *
 * The `TileDecoderService` handles a [[DecodeTileRequest]], which contains a tile and its freshly
 * loaded binary data, decodes the content with the [[ITileDecoder]] that the service is configured
 * to use, and sends the data back in form of a [[WorkerServiceResponse]].
 */
export declare class TileDecoderService extends WorkerService {
    readonly serviceId: string;
    private readonly m_decoder;
    /**
     * Start a [[TileDecoderService]] with a given decoder.
     *
     * @param serviceId - Service id. Must be unique.
     * @param decoder -   [[TileDecoder]] instance.
     */
    static start(serviceId: string, decoder: ITileDecoder): TileDecoderService;
    /**
     * Set up the `TileDecoderService`. The name of the service must be unique
     *
     * @param serviceId - Service id. Must be unique.
     * @param m_decoder - Decoder to handle the decoding and info requests.
     */
    constructor(serviceId: string, m_decoder: ITileDecoder);
    /**
     * Handle incoming request messages. Identifies message type and processes the request.
     *
     * @param request - Message that is either a DecodeTileRequest or a TileInfoRequest.
     * @returns A promise which resolves to a [[WorkerServiceResponse]].
     * @override
     */
    protected handleRequest(request: any): Promise<WorkerServiceResponse>;
    /**
     * Handle incoming configuration message. Configuration message is passed on to decoder.
     *
     * @param request - Message of type [[ConfigurationMessage]].
     * @override
     */
    protected handleMessage(message: any): void;
    private handleDecodeTileRequest;
    private handleTileInfoRequest;
    private handleConfigurationMessage;
}
//# sourceMappingURL=TileDecoderService.d.ts.map