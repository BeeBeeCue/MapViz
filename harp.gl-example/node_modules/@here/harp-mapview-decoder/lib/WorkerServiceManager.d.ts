import { WorkerService, WorkerServiceResponse } from "./WorkerService";
/**
 * Factory function that creates [[WorkerService]].
 */
export declare type WorkerServiceFactory = (serviceId: string) => WorkerService;
/**
 * Worker service class definition as needed by [[WorkerServiceManager.register]].
 */
export interface WorkerServiceDescriptor {
    serviceType: string;
    factory: WorkerServiceFactory;
}
/**
 * Manages dynamic worker services in Web Worker context.
 *
 * Handles `CreateService` and `DestroyService` messages sent to Web Worker. Singleton (in scope of
 * one worker runtime!), starts automatically with first [[getInstance]] call.
 */
export declare class WorkerServiceManager extends WorkerService {
    /**
     * Gets the default instance of `WorkerServiceManager`. Starts the service when first called.
     */
    static getInstance(): WorkerServiceManager;
    /**
     * Default instance of `WorkerServiceManager`.
     */
    private static m_service;
    /**
     * Contains all registered service factories indexed by `serviceType`.
     */
    private readonly m_factories;
    /**
     * Contains all managed worker services indexed by their `serviceId`.
     */
    private readonly m_services;
    private constructor();
    /**
     * Register [[WorkerService]] class to this manager.
     *
     * @param workerServiceDescriptor - service type and factory
     */
    register(workerServiceDescriptor: WorkerServiceDescriptor): void;
    /** @override */
    protected handleRequest(request: any): Promise<WorkerServiceResponse>;
}
//# sourceMappingURL=WorkerServiceManager.d.ts.map