"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThemedTileDecoder = void 0;
const index_decoder_1 = require("@here/harp-datasource-protocol/index-decoder");
/**
 * `ThemedTileDecoder` implements an [[ITileDecoder]] which uses a [[Theme]] to apply styles to the
 * objects displayed in the map.
 *
 * By default, decoders are executed in web workers (using [[TileDecoderService]]) for performance
 * reasons.
 */
class ThemedTileDecoder {
    constructor() {
        this.m_storageLevelOffset = 0;
    }
    dispose() {
        // implemented in subclasses
    }
    decodeTile(data, tileKey, projection) {
        if (this.m_styleSetEvaluator === undefined) {
            return Promise.reject(new Error("No style is defined"));
        }
        return this.decodeThemedTile(data, tileKey, this.m_styleSetEvaluator, projection);
    }
    getTileInfo(data, tileKey, projection) {
        return Promise.resolve(undefined);
    }
    configure(options, customOptions) {
        if ((options === null || options === void 0 ? void 0 : options.styleSet) !== undefined) {
            this.m_styleSetEvaluator = new index_decoder_1.StyleSetEvaluator(options);
        }
        if ((options === null || options === void 0 ? void 0 : options.languages) !== undefined) {
            this.languages = options.languages;
        }
        if (customOptions !== undefined && customOptions.storageLevelOffset !== undefined) {
            this.m_storageLevelOffset = customOptions.storageLevelOffset;
        }
    }
}
exports.ThemedTileDecoder = ThemedTileDecoder;
//# sourceMappingURL=ThemedTileDecoder.js.map