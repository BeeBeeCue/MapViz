import "@here/harp-fetch";
import { DecodedTile, ITileDecoder, RequestController, TileInfo } from "@here/harp-datasource-protocol";
import { TileKey } from "@here/harp-geoutils";
import { BaseTileLoader, DataSource } from "@here/harp-mapview";
import { TileLoaderState } from "@here/harp-mapview/lib/ITileLoader";
import { DataProvider } from "./DataProvider";
/**
 * The [[TileLoader]] manages the different states of loading and decoding for a [[Tile]]. Used by
 * the [[TileDataSource]].
 */
export declare class TileLoader extends BaseTileLoader {
    protected dataSource: DataSource;
    protected tileKey: TileKey;
    protected dataProvider: DataProvider;
    protected tileDecoder: ITileDecoder;
    /**
     * The binary data in form of [[ArrayBufferLike]], or any object.
     */
    payload?: ArrayBufferLike | {};
    /**
     * The result of decoding the `payload`: The [[DecodedTile]].
     */
    decodedTile?: DecodedTile;
    /**
     * The  notifying the [[ITileDecoder]] to cancel decoding.
     */
    protected requestController?: RequestController;
    /**
     * Set up loading of a single [[Tile]].
     *
     * @param dataSource - The [[DataSource]] the tile belongs to.
     * @param tileKey - The quadtree address of a [[Tile]].
     * @param dataProvider - The [[DataProvider]] that retrieves the binary tile data.
     * @param tileDecoder - The [[ITileDecoder]] that decodes the binary tile to a [[DecodeTile]].
     */
    constructor(dataSource: DataSource, tileKey: TileKey, dataProvider: DataProvider, tileDecoder: ITileDecoder);
    /**
     * @override
     */
    get priority(): number;
    /**
     * @override
     */
    set priority(priority: number);
    /**
     * @override
     */
    protected loadImpl(abortSignal: AbortSignal, onDone: (doneState: TileLoaderState) => void, onError: (error: Error) => void): void;
    /**
     * @override
     */
    protected cancelImpl(): void;
    /**
     * Start decoding the payload.
     */
    protected startDecodeTile(onDone: (doneState: TileLoaderState) => void, onError: (error: Error) => void): void;
    /**
     * Called when binary data has been loaded. The loading state is now progressing to decoding.
     *
     * @param payload - Binary data in form of [[ArrayBufferLike]], or any object.
     */
    private onLoaded;
    /**
     * Called when the decoding is finished, and the [[DecodedTile]] has been created.
     *
     * @param decodedTile - The [[DecodedTile]].
     */
    private onDecoded;
}
/**
 * Subclass of [[TileLoader]] which is used by [[TileDataSource]] to load the [[TileInfo]] meta
 * data, not the tile data itself.
 */
export declare class TileInfoLoader extends TileLoader {
    tileInfo?: TileInfo;
    /** @override */
    protected startDecodeTile(onDone: (doneState: TileLoaderState) => void, onError: (error: Error) => void): void;
}
//# sourceMappingURL=TileLoader.d.ts.map