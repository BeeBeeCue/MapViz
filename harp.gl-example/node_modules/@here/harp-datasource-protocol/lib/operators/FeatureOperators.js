"use strict";
/*
 * Copyright (C) 2017-2020 HERE Europe B.V.
 * Licensed under Apache 2.0, see full license in LICENSE
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureOperators = void 0;
const Env_1 = require("../Env");
const Expr_1 = require("../Expr");
const operators = {
    "geometry-type": {
        call: (context, call) => {
            const geometryType = context.env.lookup("$geometryType");
            switch (geometryType) {
                case "point":
                    return "Point";
                case "line":
                    return "LineString";
                case "polygon":
                    return "Polygon";
                default:
                    return null;
            }
        }
    },
    "feature-state": {
        isDynamicOperator: () => true,
        call: (context, call) => {
            var _a, _b;
            if (context.scope !== Expr_1.ExprScope.Dynamic) {
                throw new Error("feature-state cannot be used in this context");
            }
            const property = context.evaluate(call.args[0]);
            if (typeof property !== "string") {
                throw new Error(`expected the name of the property of the feature state`);
            }
            const state = context.env.lookup("$state");
            if (Env_1.Env.isEnv(state)) {
                return (_a = state.lookup(property)) !== null && _a !== void 0 ? _a : null;
            }
            else if (state instanceof Map) {
                return (_b = state.get(property)) !== null && _b !== void 0 ? _b : null;
            }
            return null;
        }
    },
    id: {
        call: (context, call) => {
            var _a;
            return (_a = context.env.lookup("$id")) !== null && _a !== void 0 ? _a : null;
        }
    }
};
exports.FeatureOperators = operators;
//# sourceMappingURL=FeatureOperators.js.map