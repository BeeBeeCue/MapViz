import { MapControls } from "./MapControls";
/**
 * Option for MapControlsUI.
 */
interface MapControlsUIOptions {
    /**
     * If specified, turns on the zoom level display or zoom level input.
     */
    zoomLevel?: "show" | "input";
    /**
     * If specified, allows to switch between mercator and sphere projections at runtime.
     */
    projectionSwitch?: boolean;
    /**
     * Turns off default CSS styling for controls.
     */
    disableDefaultStyle?: boolean;
}
/**
 * Base class to handle UI overlay elements.
 */
export declare class MapControlsUI {
    readonly controls: MapControls;
    /**
     * The DOM node containing the UI.
     */
    readonly domElement: HTMLDivElement;
    private readonly m_buttonsElement;
    /**
     * Displays zoom level if [[MapControlsUIOptions.zoomLevel]] is defined.
     */
    private readonly m_zoomLevelElement;
    /**
     * Displays zoom level if [[MapControlsUIOptions.projectionSwitch]] is defined.
     */
    private readonly m_projectionSwitchElement;
    /**
     * Removes focus from input element.
     */
    private readonly m_onWindowClick;
    /**
     * Updates the display of the zoom level.
     */
    private readonly m_onMapViewRenderEvent;
    /**
     * Constructor of the UI.
     *
     * @param controls - Controls referencing a [[MapView]].
     */
    constructor(controls: MapControls, options?: MapControlsUIOptions);
    get projectionSwitchElement(): HTMLButtonElement | null;
    /**
     * Destroy this [[MapControlsUI]] instance. Unregisters all event handlers used. This method
     * should be called when you stop using [[MapControlsUI]].
     */
    dispose(): void;
    private initStyle;
}
export {};
//# sourceMappingURL=MapControlsUI.d.ts.map