import { Vector2, Vector3 } from "three";
/**
 * Transforms the given point in screen space into NDC space by taking the given screen dimension
 * into account.
 *
 * @param screenCoordinateX - X coordinate in screen space.
 * @param screenCoordinateY - Y coordinate in screen space.
 * @param screenSizeX - Width of the reference screen size.
 * @param screenSizeY - Height of the reference screen size.
 */
export declare function calculateNormalizedDeviceCoordinates(screenCoordinateX: number, screenCoordinateY: number, screenSizeX: number, screenSizeY: number): Vector2;
/**
 * Returns the direction vector that is described by the given azimuth and altitude.
 *
 * @param azimuth - Azimuth in radians.
 * @param altitude - Altitude in radians.
 */
export declare function azimuthAltitudeToDirection(azimuth: number, altitude: number): Vector3;
/**
 * Safely parses decimal value into `number`.
 *
 * Safely falls back to default value for `null`, `undefined`, `NaN`, empty strings, and strings
 * with characters other than digits.
 *
 * @param text - Number as a text to be parsed.
 * @param fallback - Default value, which is returned if `text` doesn't represent a valid number.
 */
export declare function safeParseDecimalInt(text: string | null | undefined, fallback: number): number;
/**
 * Extracts the CSS width and height of the given canvas if available, or width and height of the
 * canvas otherwise.
 *
 * @param canvas - The canvas.
 */
export declare function getWidthAndHeightFromCanvas(canvas: HTMLCanvasElement): {
    width: number;
    height: number;
};
//# sourceMappingURL=Utils.d.ts.map