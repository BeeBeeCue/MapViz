/// <reference types="tween.js" />
import { GeoCoordinatesLike } from "@here/harp-geoutils";
import { MapView } from "@here/harp-mapview";
import * as TWEEN from "@tweenjs/tween.js";
import * as THREE from "three";
import { MapControls } from "./MapControls";
/**
 * Functions used for specifying animations' speed.
 */
export declare enum EasingFunction {
    Linear = 0,
    QuadraticIn = 1,
    QuadraticOut = 2,
    QuadraticInOut = 3,
    CubicIn = 4,
    CubicOut = 5,
    CubicInOut = 6,
    QuarticIn = 7,
    QuarticOut = 8,
    QuarticInOut = 9,
    QuinticIn = 10,
    QuinticOut = 11,
    QuinticInOut = 12,
    SinusoidalIn = 13,
    SinusoidalOut = 14,
    SinusoidalInOut = 15,
    ExponentialIn = 16,
    ExponentialOut = 17,
    ExponentialInOut = 18,
    CircularIn = 19,
    CircularOut = 20,
    CircularInOut = 21,
    ElasticIn = 22,
    ElasticOut = 23,
    ElasticInOut = 24,
    BackIn = 25,
    BackOut = 26,
    BackInOut = 27,
    BounceIn = 28,
    BounceOut = 29,
    BounceInOut = 30
}
/**
 * Functions used to generate intermediate animation values.
 */
export declare enum InterpolationFunction {
    Linear = 0,
    Bezier = 1,
    CatmullRom = 2
}
/**
 * Abstract class used as base to define camera animations.
 */
export declare abstract class CameraAnimation {
    protected mapView: MapView;
    name?: string | undefined;
    /**
     * Tweening controller.
     */
    protected tween?: TWEEN.Tween;
    /**
     * `True` if animation is being played.
     */
    protected running: boolean;
    /**
     * Callback that gets triggered once the animation ends.
     */
    protected onFinished?: () => void;
    /**
     * `True` if the animation has been interrupted.
     */
    protected stopped: boolean;
    /**
     * Duration of a whole animation in milliseconds. Defaults to `10` seconds.
     */
    protected duration: number;
    /**
     * Number of times the animation should be repeated. Defaults to `0`.
     */
    protected repeat: number;
    /**
     * Easing function that control acceleration. Defaults to [[EasingFunction.Linear]].
     */
    protected easing: (k: number) => number;
    /**
     * Creates a new `CameraAnimation` object.
     *
     * @param mapView - [[MapView]] which will be affected by the animation.
     * @param name - Animation's name.
     */
    constructor(mapView: MapView, name?: string | undefined);
    /**
     * Start the animation.
     *
     * @param time - Duration of the animation in milliseconds.
     * @param onFinished - Callback that gets triggered once the animation ends.
     */
    abstract start(time?: number, onFinished?: () => void): void;
    /**
     * Update function is to be called before the next frame is rendered.
     */
    update(time?: number): boolean;
    abstract stop(): void;
    /**
     * Returns `true` if the animation is being played.
     */
    get isRunning(): boolean;
}
/**
 * Options for a camera animation.
 */
export interface CameraRotationAnimationOptions {
    /** Fixed rotation axis of camera. Defaults to `[0,0,1]` for z-axis. */
    axis?: THREE.Vector3;
    /** Start angle in degrees. Defaults to 0. */
    startAngle?: number;
    /** End angle. May be greater than 360 in case more than one rotation is required. */
    endAngle?: number;
    /** Duration of a whole animation in milliseconds. Defaults to `10` seconds. */
    duration?: number;
    /** Number of times the animation should be repeated. Defaults to `0`. */
    repeat?: number;
    /** Easing function that control acceleration. Defaults to [[EasingFunction.Linear]]. */
    easing?: EasingFunction | ((k: number) => number);
}
/**
 * Create an animation around the Z-axis of the camera.
 */
export declare class CameraRotationAnimation extends CameraAnimation {
    private readonly m_mapControls;
    /**
     * Initial camera rotation (in the Z-axis).
     */
    readonly startAngle: number;
    /**
     * Final camera rotation (in the Z-axis).
     */
    readonly endAngle: number;
    private readonly m_axis;
    private m_userCamerRotation?;
    private m_lastRotationValue;
    /**
     * Creates a new `CameraRotationAnimation` object.
     *
     * @param mapView - [[MapView]] which will be affected by the animation.
     * @param m_mapControls - [[MapControls]] this animation will be taking control of.
     * @param options - Animation's options.
     * @param name - Animation's name.
     */
    constructor(mapView: MapView, m_mapControls: MapControls | undefined, options: CameraRotationAnimationOptions, name?: string);
    /**
     * Start the animation.
     *
     * @param time - Duration of the animation in milliseconds.
     * @param onFinished - Callback that gets triggered once the animation ends.
     * @override
     */
    start(time?: number, onFinished?: () => void): void;
    /**
     * Stop the animation. Can be started again (with original values only, though).
     * @override
     */
    stop(): void;
    private readonly beginInteractionListener;
    private readonly endInteractionListener;
    /**
     * Internal start of tween. Required because the tween may be interrupted by the
     * [[MapControls]].
     */
    private startTween;
    /**
     * Internal stop of tween. Required because the tween may be interrupted by the [[MapControls]].
     */
    private stopTween;
}
export interface CameraPanAnimationOptions {
    /** List of positions. May be added later. */
    geoCoordinates?: GeoCoordinatesLike[];
    /** Duration of a whole animation in milliseconds. Defaults to `10` seconds. */
    duration?: number;
    /** Number of times the animation should be repeated. Defaults to `0`. */
    repeat?: number;
    /** Easing function that control acceleration. Defaults to [[EasingFunction.Linear]]. */
    easing?: EasingFunction | ((k: number) => number);
    /** Specifies interpolation. Defaults to [[InterpolationFunction.Linear]] */
    interpolation?: InterpolationFunction | ((v: number[], k: number) => number);
}
/**
 * Class to pan between the specified geo coordinates. Height can be specified to move the camera in
 * and out.
 */
export declare class CameraPanAnimation extends CameraAnimation {
    name?: string | undefined;
    /**
     * Specifies interpolation. Defaults to [[InterpolationFunction.CatmullRom]]
     */
    readonly interpolation: (v: number[], k: number) => number;
    private readonly m_geoCoordinates;
    /**
     * Creates a new `CameraPanAnimation` object.
     *
     * @param mapView - [[MapView]] which will be affected by the animation.
     * @param options - Animation's options.
     * @param name - Animation's name.
     */
    constructor(mapView: MapView, options: CameraPanAnimationOptions, name?: string | undefined);
    /**
     * Add a geo coordinate that should be visited.
     *
     * @param geoPos - Geographical coordinate to animate to.
     */
    addPosition(geoPos: GeoCoordinatesLike): void;
    /**
     * Start the animation.
     *
     * @param time - Duration of the animation in milliseconds.
     * @param onFinished - Callback that gets triggered once the animation ends.
     * @override
     */
    start(time?: number, onFinished?: () => void): void;
    /**
     * Stop the animation. Can be started again (with original values only, though).
     * @override
     */
    stop(): void;
    /**
     * Returns `true` if the animation is being played.
     * @override
     */
    get isRunning(): boolean;
}
//# sourceMappingURL=MapAnimations.d.ts.map