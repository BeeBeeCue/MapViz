import { GeoCoordinates } from "@here/harp-geoutils";
import { LookAtParams, MapView } from "@here/harp-mapview";
import THREE = require("three");
/**
 * The Options used to create a ControlPoint
 * @beta
 */
export interface ControlPointOptions extends Partial<Pick<LookAtParams, "target" | "tilt" | "heading" | "distance">> {
    /**
     * A timestamp for the [[ControlPoint]], describes when during the animation the
     * [[ControlPoint]] should be reached, in seconds
     */
    timestamp: number;
    /**
     * A name for the ControlPoint
     */
    name?: string;
}
/**
 * A ControlPoint used to defined the Track of the [[CameraKeyTrackAnimation]]
 * @beta
 */
export declare class ControlPoint implements Pick<LookAtParams, "target" | "tilt" | "heading" | "distance"> {
    /**
     * The time, when this ControlPoint should be reached in the animation flow, in seconds.
     */
    timestamp: number;
    target: GeoCoordinates;
    name?: string;
    tilt: number;
    heading: number;
    distance: number;
    constructor(options: ControlPointOptions);
}
/**
 * The options to create a CameraKeyTrackAnimation
 * @beta
 */
export interface CameraKeyTrackAnimationOptions {
    /**
     * The [[ControlPoint]]s the animation should pass
     */
    controlPoints: ControlPoint[];
    /**
     * An optional name for the animation, @default ""
     */
    name?: string;
    /**
     * The [[THREE.InterpolationModes]]  for the animation.
     * @default THREE.InterpolateSmooth
     */
    interpolation?: THREE.InterpolationModes;
    /**
     * See [[THREE.AnimationActionLoopStyles]]
     * @default THREE.LoopOnce
     */
    loop?: THREE.AnimationActionLoopStyles;
    /**
     * If `true`the Animation will interpolate rotations only clockwise.
     * @default true
     */
    rotateOnlyClockwise?: boolean;
    /**
     * Defines how often the Animation should be repeated.
     * @default 1
     */
    repetitions?: number;
}
/**
 * A [[CameraAnimation]] along of a set of [[ControlPoint]]s
 * @beta
 */
export declare class CameraKeyTrackAnimation {
    private readonly m_mapView;
    private m_options;
    private readonly m_animationClip;
    private readonly m_animationMixer;
    private readonly m_animationAction;
    private readonly m_dummy;
    private readonly m_azimuthAxis;
    private readonly m_altitudeAxis;
    private m_running;
    private m_onFinished;
    private readonly m_name?;
    private m_lastFrameTime;
    private readonly m_animateCb;
    constructor(m_mapView: MapView, m_options: CameraKeyTrackAnimationOptions);
    set loop(value: THREE.AnimationActionLoopStyles);
    set repetitions(value: number);
    set rotateOnlyClockwise(value: boolean);
    /**
     * Start the Animation
     */
    start(time?: number, onFinished?: () => void): void;
    /**
     * Stop the Animation
     */
    stop(): void;
    isRunning(): boolean;
    private updateCameraFromDummy;
    private animate;
}
//# sourceMappingURL=CameraKeyTrackAnimation.d.ts.map