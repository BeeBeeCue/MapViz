import * as THREE from "three";
import { RawShaderMaterial, RendererMaterialParameters } from "./RawShaderMaterial";
/**
 * `GroundAtmosphereShader`.
 *
 * Describes shading of atmosphere as seen from outer space.
 */
export declare const GroundAtmosphereShader: THREE.Shader;
export interface GroundAtmosphereMaterialParameters extends RendererMaterialParameters {
}
export declare class GroundAtmosphereMaterial extends RawShaderMaterial {
    /**
     * Constructs a new `GroundAtmosphereMaterial`.
     *
     * @param params - `GroundAtmosphereMaterial` parameters. Always required except when cloning
     * another material.
     */
    constructor(params?: GroundAtmosphereMaterialParameters);
    setDynamicLighting(enableLighting: boolean): void;
    /**
     * Set maximum outer radius of atmosphere.
     *
     * @default [[EarthConstants.EQUATORIAL_RADIUS]] * 1.025
     */
    set outerRadius(radius: number);
    get outerRadius(): number;
    /**
     * Set maximum inner radius of atmosphere.
     *
     * @default [[EarthConstants.EQUATORIAL_RADIUS]] * 1.001.
     */
    set innerRadius(radius: number);
    get innerRadius(): number;
    /**
     * Updates the uniform data of a material used to render an atmosphere.
     *
     * This includes only uniforms that may change frame by frame, other uniforms are
     * accessed with convenient material setters and getters.
     *
     * @param shaderMaterial - Material which uniforms will be updated.
     * @param matrixWorldInverse - Inverse of world matrix used to position the atmosphere dome.
     * @param lightDirection - The light directional vector in world space.
     * @param camera - Camera used in rendering.
     */
    updateUniforms(shaderMaterial: THREE.ShaderMaterial, object: THREE.Object3D, camera: THREE.Camera, lightDirection: THREE.Vector3): void;
    private getCameraInfo;
}
//# sourceMappingURL=GroundAtmosphereMaterial.d.ts.map