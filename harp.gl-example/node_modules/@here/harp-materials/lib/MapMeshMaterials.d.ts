import { ViewRanges } from "@here/harp-datasource-protocol/lib/ViewRanges";
import * as THREE from "three";
import { DisplacementFeature, DisplacementFeatureParameters } from "./DisplacementFeature";
/**
 * The MapMeshMaterials [[MapMeshBasicMaterial]] and [[MapMeshStandardMaterial]] are the standard
 * [[THREE.MeshBasicMaterial]] and [[THREE.MeshStandardMaterial]], with the addition functionality
 * of fading out the geometry between a fadeNear and fadeFar value.
 *
 * The implementation is designed around a mixin class {@link FadingFeatureMixin}, which requires
 * a bit of care when adding the FadingFeature to the existing mesh classes, but it is safe to use
 * and also reduces code duplication.
 */
/**
 * Parameters used when constructing a new implementor of {@link FadingFeature}.
 */
export interface FadingFeatureParameters {
    /**
     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.
     */
    fadeNear?: number;
    /**
     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent.
     */
    fadeFar?: number;
}
/**
 * Parameter used to control patching the standard material shader to ensure that the materials
 * color isn't affected by the light direction, only valid for techniques that are "fill"
 */
export interface ShadowFeatureParameters {
    /**
     * Whether the diffuse light component is removed (i.e. the materials color is therefore just
     * the ambient + shadow).
     */
    removeDiffuseLight?: boolean;
}
/**
 * Parameters used when constructing a new implementor of {@link ExtrusionFeature}.
 */
export interface ExtrusionFeatureParameters {
    /**
     * Ratio of the extruded objects, where `1.0` is the default value
     */
    extrusionRatio?: number;
    /**
     * Enable z-fighting workaround that doesn't animate buildings with `height <
     * [[ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT]]`.
     *
     * Should be applied to `polygon` materials using this feature.
     */
    zFightingWorkaround?: boolean;
}
/**
 * Used internally.
 *
 * @hidden
 */
export interface UniformsType {
    [index: string]: THREE.IUniform;
}
/**
 * Type of callback used internally by THREE.js for shader creation.
 *
 * @hidden
 */
declare type CompileCallback = (shader: THREE.Shader, renderer: any) => void;
/**
 * Material properties used from THREE, which may not be defined in the type.
 */
export interface HiddenThreeJSMaterialProperties {
    /**
     * Informs THREE.js to re-compile material shader (due to change in code or defines).
     */
    needsUpdate?: boolean;
    /**
     * Hidden ThreeJS value that is made public here. Required to add new uniforms to subclasses of
     * [[THREE.MeshBasicMaterial]]/[[THREE.MeshStandardMaterial]], basically all materials that are
     * not THREE.ShaderMaterial.
     * @deprecated Changes to this property are ignored.
     */
    uniformsNeedUpdate?: boolean;
    /**
     * Available in all materials in ThreeJS.
     */
    transparent?: boolean;
    /**
     * Used internally for material shader defines.
     */
    defines?: any;
    /**
     * Defines callback available in THREE.js materials.
     *
     * Called before shader program compilation to generate vertex & fragment shader output code.
     */
    onBeforeCompile?: CompileCallback;
}
/**
 * Used internally.
 *
 * @hidden
 */
export interface MixinShaderProperties {
    /**
     * Used internally for material shader defines.
     */
    shaderDefines?: any;
    /**
     * Used internally for shader uniforms, holds references to material internal shader.uniforms.
     *
     * Holds a reference to material's internal shader uniforms map. New custom feature based
     * uniforms are injected using this reference, but also internal THREE.js shader uniforms
     * will be available via this map after [[Material#onBeforeCompile]] callback is run with
     * feature enabled.
     * @see needsUpdate
     */
    shaderUniforms?: UniformsType;
}
/**
 * Base interface for all objects that should fade in the distance. The implementation of the actual
 * FadingFeature is done with the help of the mixin class {@link FadingFeatureMixin} and a set of
 * supporting functions in the namespace of the same name.
 */
export interface FadingFeature extends HiddenThreeJSMaterialProperties, MixinShaderProperties {
    /**
     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.
     */
    fadeNear?: number;
    /**
     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent. A value
     * of <= 0.0 disables fading.
     */
    fadeFar?: number;
}
/**
 * Base interface for all objects that should have animated extrusion effect.
 *
 * @remarks
 * The implementation of the actual ExtrusionFeature is done with
 * the help of the mixin class {@link ExtrusionFeatureMixin}
 * and a set of supporting functions in the namespace of the same name.
 */
export interface ExtrusionFeature extends HiddenThreeJSMaterialProperties, MixinShaderProperties {
    /**
     * Ratio of the extruded objects, where `1.0` is the default value. Minimum suggested value
     * is `0.01`
     */
    extrusionRatio?: number;
}
/**
 * Determines whether a given material supports extrusion.
 * @param material The material to check.
 * @returns Whether the given material supports extrusion.
 */
export declare function hasExtrusionFeature(material: any): material is ExtrusionFeature;
declare namespace DisplacementFeature {
    /**
     * Checks if feature is enabled (displacement map defined).
     *
     * @param displacementMaterial -
     */
    function isEnabled(displacementMaterial: DisplacementFeature): boolean;
    /**
     * Update the internals of the `DisplacementFeature` depending on the value of
     * [[displacementMap]].
     *
     * @param displacementMaterial - DisplacementFeature
     */
    function updateDisplacementFeature(displacementMaterial: DisplacementFeature & MixinShaderProperties): void;
    /**
     * This function should be called on implementors of DisplacementFeature in the
     * `onBeforeCompile` callback of that material. It adds the required code to the shaders to
     * apply displacement maps.
     *
     * @param displacementMaterial - Material to add uniforms to.
     * @param shader - [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the
     *                  special includes to.
     */
    function onBeforeCompile(displacementMaterial: DisplacementFeature & MixinShaderProperties, shader: THREE.Shader): void;
}
export declare class DisplacementFeatureMixin implements DisplacementFeature, MixinShaderProperties {
    needsUpdate?: boolean;
    uniformsNeedUpdate?: boolean;
    defines?: any;
    shaderDefines?: any;
    shaderUniforms?: UniformsType;
    onBeforeCompile?: CompileCallback;
    private m_displacementMap;
    get displacementMap(): THREE.Texture | null;
    set displacementMap(map: THREE.Texture | null);
    protected getDisplacementMap(): THREE.Texture | null;
    protected setDisplacementMap(map: THREE.Texture | null): void;
    /**
     * The mixin class should call this method to register the property [[displacementMap]]
     */
    protected addDisplacementProperties(): void;
    /**
     * Apply the displacementMap value from the parameters to the respective properties.
     */
    protected applyDisplacementParameters(params?: DisplacementFeatureParameters): void;
    /**
     * Copy displacementMap from other DisplacementFeature.
     *
     * @param source - The material to copy property values from.
     */
    protected copyDisplacementParameters(source: DisplacementFeature): this;
}
/**
 * Namespace with support functions for implementors of `FadingFeature`.
 */
export declare namespace FadingFeature {
    const DEFAULT_FADE_NEAR: number;
    const DEFAULT_FADE_FAR: number;
    /**
     * Checks if feature is enabled based on feature params.
     *
     * Fading feature will be disabled if fadeFar is undefined or fadeFar <= 0.0.
     * This function is crucial for shader switching (chunks injection), whenever feature state
     * changes between enabled/disabled. Current approach is to keep feature on (once enabled)
     * whenever fading params are reasonable, even if it causes full fade in, no transparency.
     *
     * @param fadingMaterial - FadingFeature.
     */
    function isEnabled(fadingMaterial: FadingFeature): boolean;
    /**
     * Checks if feature is defined based on feature params.
     *
     * Fading feature will be defined if fadeNear and fadeFar are defined, their values
     * are not checked for reasonable values.
     *
     * @param fadingMaterial FadingFeature.
     */
    function isDefined(fadingMaterial: FadingFeature): boolean;
    /**
     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.
     */
    function patchGlobalShaderChunks(): void;
    /**
     * Update the internals of the `FadingFeature` depending on the value of [[fadeNear]]. The
     * fading feature will be disabled if fadeFar <= 0.0.
     *
     * @param fadingMaterial - FadingFeature
     */
    function updateFadingFeature(fadingMaterial: FadingFeature): void;
    /**
     * This function should be called on implementors of FadingFeature in the `onBeforeCompile`
     * callback of that material. It adds the required code to the shaders and declares the new
     * uniforms that control fading based on view distance.
     *
     * @param fadingMaterial - Material to add uniforms to.
     * @param shader - [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the
     *                  special includes to.
     */
    function onBeforeCompile(fadingMaterial: FadingFeature, shader: THREE.Shader): void;
    /**
     * As three.js is rendering the transparent objects last (internally), regardless of their
     * renderOrder value, we set the transparent value to false in the [[onAfterRenderCall]]. In
     * [[onBeforeRender]], the function [[calculateDepthFromCameraDistance]] sets it to true if the
     * fade distance value is less than 1.
     *
     * @param object - [[THREE.Object3D]] to prepare for rendering.
     * @param viewRanges - The visibility ranges (clip planes and maximum visible distance) for
     * actual camera setup.
     * @param fadeNear - The fadeNear value to set in the material.
     * @param fadeFar - The fadeFar value to set in the material.
     * @param updateUniforms - If `true`, the fading uniforms are set. Not required if material is
     *          handling the uniforms already, like in a [[THREE.ShaderMaterial]].
     * @param additionalCallback - If defined, this function will be called before the function will
     *          return.
     */
    function addRenderHelper(object: THREE.Object3D, viewRanges: ViewRanges, fadeNear: number | undefined, fadeFar: number | undefined, updateUniforms: boolean, additionalCallback?: (renderer: THREE.WebGLRenderer, material: THREE.Material & FadingFeature) => void): void;
}
/**
 * Mixin class for extended THREE materials. Adds new properties required for `fadeNear` and
 * `fadeFar`. There is some special handling for the fadeNear/fadeFar properties, which get some
 * setters and getters in a way that works well with the mixin.
 *
 * @see [[Tile#addRenderHelper]]
 */
export declare class FadingFeatureMixin implements FadingFeature {
    needsUpdate?: boolean;
    uniformsNeedUpdate?: boolean;
    defines?: any;
    shaderDefines?: any;
    shaderUniforms?: UniformsType;
    onBeforeCompile?: CompileCallback;
    private m_fadeNear;
    private m_fadeFar;
    /**
     * @see [[FadingFeature#fadeNear]]
     */
    protected getFadeNear(): number;
    /**
     * @see [[FadingFeature#fadeNear]]
     */
    protected setFadeNear(value: number): void;
    /**
     * @see [[FadingFeature#fadeFar]]
     */
    protected getFadeFar(): number;
    /**
     * @see [[FadingFeature#fadeFar]]
     */
    protected setFadeFar(value: number): void;
    /**
     * The mixin classes should call this method to register the properties [[fadeNear]] and
     * [[fadeFar]].
     */
    protected addFadingProperties(): void;
    /**
     * Apply the fadeNear/fadeFar values from the parameters to the respective properties.
     *
     * @param params - `FadingMeshBasicMaterial` parameters.
     */
    protected applyFadingParameters(params?: FadingFeatureParameters): void;
    /**
     * Copy fadeNear/fadeFar values from other FadingFeature.
     *
     * @param source - The material to copy property values from.
     */
    protected copyFadingParameters(source: FadingFeature): this;
}
export declare namespace ExtrusionFeature {
    /**
     * Checks if feature is enabled based on {@link ExtrusionFeature} properties.
     *
     * @param extrusionMaterial -
     */
    function isEnabled(extrusionMaterial: ExtrusionFeature): boolean;
    /**
     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.
     */
    function patchGlobalShaderChunks(): void;
    /**
     * Update the internals of the `ExtrusionFeature` depending on the value of [[extrusionRatio]].
     *
     * @param ExtrusionMaterial - ExtrusionFeature
     */
    function updateExtrusionFeature(extrusionMaterial: ExtrusionFeature): void;
    /**
     * This function should be called on implementors of ExtrusionFeature in the `onBeforeCompile`
     * callback of that material. It adds the required code to the shaders and declares the new
     * uniforms that control extrusion.
     *
     * @param extrusionMaterial - Material to add uniforms to.
     * @param shader - [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the
     *                  special includes to.
     */
    function onBeforeCompile(extrusionMaterial: ExtrusionFeature, shader: THREE.Shader): void;
}
/**
 * Mixin class for extended THREE materials. Adds new properties required for `extrusionRatio`.
 *
 * @remarks
 * There is some special handling for the extrusionRatio property, which is animated via
 * {@link @here/harp-mapview#AnimatedExtrusionHandler} that is
 * using [[extrusionRatio]] setter and getter to update
 * extrusion in a way that works well with the mixin and EdgeMaterial.
 */
export declare class ExtrusionFeatureMixin implements ExtrusionFeature {
    needsUpdate?: boolean;
    uniformsNeedUpdate?: boolean;
    defines?: any;
    shaderDefines?: any;
    shaderUniforms?: UniformsType;
    onBeforeCompile?: CompileCallback;
    private m_extrusion;
    /**
     * @see [[ExtrusionFeature#extrusion]]
     */
    protected getExtrusionRatio(): number;
    /**
     * @see [[ExtrusionFeature#extrusion]]
     */
    protected setExtrusionRatio(value: number): void;
    /**
     * The mixin class should call this method to register the property [[extrusionRatio]]
     */
    protected addExtrusionProperties(): void;
    /**
     * Apply the extrusionRatio value from the parameters to the respective properties.
     */
    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters): void;
    /**
     * Copy extrusionRatio values from other ExtrusionFeature.
     *
     * @param source - The material to copy property values from.
     */
    protected copyExtrusionParameters(source: ExtrusionFeature): this;
}
/**
 * Subclass of [[THREE.MeshBasicMaterial]]. Adds new properties required for [[fadeNear]] and
 * [[fadeFar]]. In addition to the new properties (which update their respective uniforms), it is
 * also required to update the material in their objects [[onBeforeRender]] and [[OnAfterRender]]
 * calls, where their flag [[transparent]] is set and the internal fadeNear/fadeFar values are
 * updated to world space distances.
 *
 * @see [[Tile#addRenderHelper]]
 */
export declare class MapMeshBasicMaterial extends THREE.MeshBasicMaterial implements FadingFeature, ExtrusionFeature, DisplacementFeature {
    /**
     * Constructs a new `FadingMeshBasicMaterial`.
     *
     * @param params - `FadingMeshBasicMaterial` parameters.
     */
    constructor(params?: THREE.MeshBasicMaterialParameters & FadingFeatureParameters & ExtrusionFeatureParameters & DisplacementFeatureParameters);
    clone(): this;
    copy(source: this): any;
    get fadeNear(): number;
    set fadeNear(value: number);
    get fadeFar(): number;
    set fadeFar(value: number);
    get extrusionRatio(): number;
    set extrusionRatio(value: number);
    get displacementMap(): THREE.Texture | null;
    set displacementMap(value: THREE.Texture | null);
    setDisplacementMap(value: THREE.Texture | null): void;
    protected addFadingProperties(): void;
    protected applyFadingParameters(params?: FadingFeatureParameters): void;
    protected copyFadingParameters(source: FadingFeature): void;
    protected addExtrusionProperties(): void;
    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters): void;
    protected copyExtrusionParameters(source: FadingFeature): void;
    protected addDisplacementProperties(): void;
    protected applyDisplacementParameters(params?: DisplacementFeatureParameters): void;
    protected copyDisplacementParameters(source: DisplacementFeature): void;
}
export declare class MapMeshDepthMaterial extends THREE.MeshDepthMaterial implements ExtrusionFeature {
    constructor(params?: THREE.MeshDepthMaterialParameters & ExtrusionFeatureParameters);
    get extrusionRatio(): number;
    set extrusionRatio(value: number);
    protected addExtrusionProperties(): void;
    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters): void;
    protected copyExtrusionParameters(source: FadingFeature): void;
}
/**
 * Subclass of THREE.MeshStandardMaterial. Adds new properties required for `fadeNear` and
 * `fadeFar`. In addition to the new properties (which fill respective uniforms), it is also
 * required to update the material in their objects `onBeforeRender` and `OnAfterRender` calls,
 * where their flag `transparent` is set and the internal fadeNear/fadeFar values are updated to
 * world space distances.
 *
 * @see [[Tile#addRenderHelper]]
 */
export declare class MapMeshStandardMaterial extends THREE.MeshStandardMaterial implements FadingFeature, ExtrusionFeature, DisplacementFeature {
    uniformsNeedUpdate?: boolean;
    /**
     * Constructs a new `FadingMeshStandardMaterial`.
     *
     * @param params - `FadingMeshStandardMaterial` parameters.
     */
    constructor(params?: THREE.MeshStandardMaterialParameters & FadingFeatureParameters & ExtrusionFeatureParameters & ShadowFeatureParameters);
    clone(): this;
    copy(source: this): any;
    /** @override */
    get displacementMap(): THREE.Texture | null;
    /** @override */
    set displacementMap(map: THREE.Texture | null);
    get fadeNear(): number;
    set fadeNear(value: number);
    get fadeFar(): number;
    set fadeFar(value: number);
    get extrusionRatio(): number;
    set extrusionRatio(value: number);
    /**
     * This is needed to simplify the lighting calculation, currently there is no support for
     * switching this at runtime. It is required here to be a property because the parameters
     * are applied to this material, and if this isn't here, three.js will complain that the
     * property is missing.
     * @internal
     */
    get removeDiffuseLight(): boolean;
    /** @internal */
    set removeDiffuseLight(val: boolean);
    protected addFadingProperties(): void;
    protected applyFadingParameters(params?: FadingFeatureParameters): void;
    protected copyFadingParameters(source: FadingFeature): void;
    protected addExtrusionProperties(): void;
    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters): void;
    protected copyExtrusionParameters(source: FadingFeature): void;
}
export {};
//# sourceMappingURL=MapMeshMaterials.d.ts.map