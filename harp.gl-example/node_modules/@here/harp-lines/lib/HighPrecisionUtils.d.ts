import { HighPrecisionLineMaterialParameters, HighPrecisionPointMaterial } from "@here/harp-materials";
import { BufferAttribute, Camera, Matrix4, PointsMaterialParameters, ShaderMaterial, Vector3 } from "three";
import * as HPL from "./HighPrecisionLines";
import * as HPP from "./HighPrecisionPoints";
export declare namespace HighPrecisionUtils {
    /**
     * Extract the `float` parts of all vector members, Making this a `Vector3` of `float`.
     * precision.
     *
     * @param v -
     */
    function doubleToFloatVec(v: Vector3): Vector3;
    /**
     * Convert a `Vector3` to `float` (in place!) Returns the minor float vector, which is the
     * difference of the double elements and their float counterparts.
     *
     * @param v - Vector3 to convert to float IN-PLACE!
     */
    function makeFloatVec(v: Vector3): Vector3;
    /**
     * Describes addtional postion data needed to render high-precision vertices. Created by
     * [[createHighPrecisionCameraPos]].
     */
    interface HighPrecisionCameraInfo {
        /**
         * View Projection matrix of this high-precision camera.
         */
        viewProjection: Matrix4;
        /**
         * Low-order bits of the high-precision camera's position.
         */
        eyePosLo: Vector3;
        /**
         * High-order bits of the high-precision camera's position.
         */
        eyePosHi: Vector3;
    }
    /**
     * Describes different properties used when creating a [[HighPrecisionLine]] or
     * a [[HighPrecisionWireFrameLine]].
     */
    interface HighPrecisionLineParams extends HighPrecisionLineMaterialParameters {
        /**
         * Width of the rendered line (specified in world units).
         */
        lineWidth?: number;
        /**
         * Add rounded caps to the extremes of the line if set to `true`.
         */
        addCircles?: boolean;
        /**
         * Renders a wireframe line if set to `true`.
         */
        wireFrame?: boolean;
    }
    /**
     * Calculate high-precision camera position used in vertex shader of high-precision materials.
     *
     * @param camera - Camera used to get the high-precision position.
     * @param objectInverseWorldMatrix - Inverse World Matrix of the rendered
     *                                   [[HighPrecisionObject]].
     */
    function createHighPrecisionCameraPos(camera: Camera, objectInverseWorldMatrix: Matrix4): HighPrecisionCameraInfo;
    /**
     * Updates the high-precision uniform data of a material used to render a
     * [[HighPrecisionObject]].
     *
     * @param object - [[HighPrecisionObject]] used for rendering.
     * @param camera - Camera used to get the high-precision position.
     * @param shaderMaterial - Material which uniforms will be updated.
     */
    function updateHpUniforms(object: HPL.HighPrecisionObject, camera: Camera, shaderMaterial: ShaderMaterial): void;
    /**
     * Assembles the necessary attribute buffers needed to render [[HighPrecisionObject]].
     *
     * @param positions - Array of positions.
     */
    function createAttributes(positions: ArrayLike<number> | ArrayLike<Vector3>): {
        positionHigh: BufferAttribute;
        positionLow: BufferAttribute;
    };
    /**
     * Assembles an interleaved buffer containing the position attribute data for a
     * [[HighPrecisionObject]].
     *
     * @param positions - Array of positions.
     * @param stride - Stride of the elements in the `positions` array.
     * @param positionOffset - Offset into the `positions` array.
     */
    function addInterleavedAttributes3(positions: ArrayLike<number>, stride: number, positionOffset?: number): ArrayLike<number>;
    /**
     * Adds the high-precision position attribute data to a [[HighPrecisionObject]].
     *
     * @param object - [[HighPrecisionObject]] which position attribute will be set.
     * @param positions - Array of positions.
     */
    function setPositions(object: HPL.HighPrecisionObject, positions: ArrayLike<number> | ArrayLike<Vector3>): number;
    /**
     * Convert positions from `Array<Vector3>` to `Array<number>`.
     *
     * @param positions - Array of positions.
     */
    function convertPositions(positions: ArrayLike<number> | ArrayLike<Vector3>): {
        positions: number[];
    };
    /**
     * Creates a [[HighPrecisionLine]] or [[HighPrecisionWireFrameLine]] object.
     *
     * @param linePositions - Array of 2D/3D positions.
     * @param params - Parameters used to configure the created [[HighPrecisionObject]].
     */
    function createLine(linePositions: ArrayLike<number>, params: HighPrecisionLineParams): HPL.HighPrecisionLine | HPL.HighPrecisionWireFrameLine;
    /**
     * Creates a group of [[HighPrecisionPoints]].
     *
     * @param pointPositions - Array of 2D/3D positions.
     * @param materialParameters - Parameters used to configure the material used to render the
     * created [[HighPrecisionPoints]].
     */
    function createPoints(pointPositions: ArrayLike<number>, materialParameters?: PointsMaterialParameters | HighPrecisionPointMaterial): HPP.HighPrecisionPoints;
}
//# sourceMappingURL=HighPrecisionUtils.d.ts.map