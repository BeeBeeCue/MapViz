import { Vector2 } from "three";
/**
 * Abstract helper class used to implement the Sutherland-Hodgman clipping algorithm.
 *
 * @remarks
 * Concrete implementation of this class are used to clip a polygon
 * against one edge of a bounding box.
 *
 * @internal
 */
export declare abstract class ClippingEdge {
    /**
     * Tests if the given point is inside this clipping edge.
     *
     * @param point A point of the polygon.
     * @param extent The extent of the bounding box.
     */
    abstract inside(point: Vector2, extent: number): boolean;
    /**
     * Computes the intersection of a line and this clipping edge.
     *
     * @remarks
     * Specialization of {@link https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection
     *    | line-line intersection}.
     *
     * @param a A point of the segment to clip.
     * @param b A point of the segment to clip.
     * @param extent The extent of the bounding box.
     */
    abstract computeIntersection(a: Vector2, b: Vector2, extent: number): Vector2;
    /**
     * Clip the polygon against this clipping edge.
     *
     * @param polygon Clip the polygon against this edge.
     * @param extent The extent of the bounding box.
     */
    clipPolygon(polygon: Vector2[], extent: number): Vector2[];
}
/**
 * Clip the given polygon using the Sutherland-Hodgman algorithm.
 *
 * @remarks
 * The coordinates of the polygon must be integer numbers.
 *
 * @param polygon The vertices of the polygon to clip.
 * @param extent The extents of the rectangle to clip against.
 */
export declare function clipPolygon(polygon: Vector2[], extent: number): Vector2[];
//# sourceMappingURL=ClipPolygon.d.ts.map