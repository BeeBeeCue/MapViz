import * as THREE from "three";
import { MemoryUsage } from "../TextCanvas";
import { GlyphData } from "./GlyphData";
import { FontStyle, TextRenderStyle } from "./TextStyle";
/**
 * Metrics defining the placement and rendering of all glyphs in a given [[Font]].
 */
export interface FontMetrics {
    size: number;
    distanceRange: number;
    base: number;
    lineHeight: number;
    lineGap: number;
    capHeight: number;
    xHeight: number;
}
/**
 * Description of all assets, charset and metrics that define a font inside a [[FontCatalog]].
 */
export interface Font {
    name: string;
    metrics: FontMetrics;
    charset: string;
    bold?: string;
    italic?: string;
    boldItalic?: string;
}
/**
 * Description of a continuous range of Unicode code points (as well as information on which fonts
 * supports it).
 */
export interface UnicodeBlock {
    name: string;
    min: number;
    max: number;
    fonts: string[];
}
/**
 * Collection of font assets used to render glyphs when using a [[TextCanvas]].
 *
 * @summary A `FontCatalog` works as a stack of SDF bitmap fonts (using the BMFont format) designed
 * to cover the widest Unicode code point range possible. In order to manage all these assets
 * elegantly, the assets inside the `FontCatalog` are stored on a per-Unicode-Block basis, and
 * assets for a block are only loaded once a glyph belonging to that block is requested.
 *
 * Bitmap information coming from all different fonts is then stored in a unified WebGL GPU Texture
 * resource, which can be sampled to render all currently loaded glyphs.
 *
 */
export declare class FontCatalog {
    readonly url: string;
    readonly name: string;
    readonly type: string;
    readonly size: number;
    readonly maxWidth: number;
    readonly maxHeight: number;
    readonly distanceRange: number;
    readonly fonts: Font[];
    readonly unicodeBlocks: UnicodeBlock[];
    readonly maxCodePointCount: number;
    private readonly m_replacementGlyph;
    /**
     * Loads a `FontCatalog`.
     *
     * @param url - Asset url.
     * @param maxCodePointCount - Maximum number of unique code points bitmaps this `FontCatalog`'s
     * internal texture can store simultaneously.
     *
     * @returns `FontCatalog` Promise.
     */
    static load(path: string, maxCodePointCount: number): Promise<FontCatalog>;
    static loadTexture(url: string): Promise<THREE.Texture>;
    static loadJSON(url: string): Promise<any>;
    private readonly m_glyphTextureCache;
    private readonly m_loadingJson;
    private readonly m_loadingPages;
    private readonly m_loadingGlyphs;
    private readonly m_loadedJson;
    private readonly m_loadedPages;
    private readonly m_loadedGlyphs;
    /** If `true`, a replacement glyph is returned for every missing glyph. */
    showReplacementGlyphs: boolean;
    /**
     * @hidden
     * Creates a new FontCatalog.
     *
     * @param url - FontCatalog's URL.
     * @param name - FontCatalog's name.
     * @param type - FontCatalog's type (sdf or msdf).
     * @param size - FontCatalog's glyph size (pixels).
     * @param maxWidth - FontCatalog's maximum glyph width (pixels).
     * @param maxHeight - FontCatalog's maximum glyph height (pixels).
     * @param distanceRange - Distance range used to generate the SDF bitmaps.
     * @param fonts - Array of supported fonts.
     * @param unicodeBlocks - Array of supported Unicode blocks.
     * @param maxCodePointCount - Maximum number of unique code points bitmaps this `FontCatalog`'s
     * internal texture can store simultaneously.
     * @param m_replacementGlyph - [[GlyphData]] to be used whenever a Unicode code point is not
     * supported by this `FontCatalog`.
     *
     * @returns New FontCatalog.
     */
    private constructor();
    /**
     * Release all allocated resources.
     */
    dispose(): void;
    /**
     * Removes all loaded (and loading) assets.
     */
    clear(): void;
    /**
     * Updates the internal WebGLRenderTarget.
     * The update will copy the newly introduced glyphs since the previous update.
     *
     * @param renderer - WebGLRenderer.
     */
    update(renderer: THREE.WebGLRenderer): void;
    /**
     * Internal WebGL Texture.
     */
    get texture(): THREE.Texture;
    /**
     * Internal WebGL Texture size.
     */
    get textureSize(): THREE.Vector2;
    /**
     * Current internal loading state.
     */
    get isLoading(): boolean;
    /**
     * Loads the description file for a specific [[UnicodeBlock]]. This speeds up consequent calls
     * to `FontCatalog`.loadCharset() that require glyphs from this block to be loaded.
     *
     * @param block - Requested [[UnicodeBlock]].
     * @param font - [[Font]] to retrieve this Unicode block from.
     * @param fontStyle - [[FontStyle]] assets to load.
     * @param loadPages - If `true`, all pages in this Unicode block will also be loaded.
     *
     * @returns Loaded Unicode Block json.
     */
    loadBlock(block: UnicodeBlock, font: Font, fontStyle: FontStyle, loadPages?: boolean): Promise<any>;
    /**
     * Releases the description file for a specific [[UnicodeBlock]] (and all downloaded pages).
     * Safe to call when no assets for this block have been loaded.
     *
     * @param block - Requested [[UnicodeBlock]].
     * @param font - [[Font]] to remove this Unicode block from.
     * @param fontStyle - [[FontStyle]] assets to remove.
     */
    removeBlock(block: UnicodeBlock, font: Font, fontStyle: FontStyle): void;
    /**
     * Loads all the required glyphs needed to render the input text. Character repetition will not
     * be considered, and only styled assets (with applied font selection, style and variants) will
     * be loaded.
     *
     * @param input - Input text.
     * @param style - Specific [[TextRenderStyle]] for which glyphs will be loaded.
     *
     * @returns Promise containing an array of all loaded [[GlyphData]] for the input text.
     */
    loadCharset(input: string, style: TextRenderStyle): Promise<GlyphData[]>;
    /**
     * Retrieves the loaded [[GlyphData]] for a specific character.
     * Returns `undefined` if the assets for this glyph haven't been loaded yet.
     *
     * @param codePoint - Character's Unicode code point.
     * @param font - [[Font]] to get this glyph from.
     * @param fontStyle - Specific [[FontStyle]] to get glyphs for.
     *
     * @returns [[GlyphData]] for this code point.
     */
    getGlyph(codePoint: number, font: Font, fontStyle: FontStyle): GlyphData | undefined;
    /**
     * Retrieves the loaded [[GlyphData]] for the specified text.
     * Returns `undefined` if the assets for these glyphs haven't been loaded yet.
     *
     * @param input - Input text.
     * @param style - Specific [[TextRenderStyle]] to get glyphs for.
     * @param letterCaseArray - Array containing the original letter case for the requested glyphs.
     *
     * @returns Array containing [[GlyphData]] for each character of the input text.
     */
    getGlyphs(input: string, style: TextRenderStyle, letterCaseArray?: boolean[]): GlyphData[] | undefined;
    /**
     * Gets the best matched font for a specific character.
     *
     * @param codePoint - Character's Unicode code point.
     * @param fontName - Font name suggestion.
     *
     * @returns Best matched font.
     */
    getFont(codePoint: number, fontName?: string): Font;
    /**
     * Update the info with the memory footprint caused by objects owned by the `FontCatalog`.
     *
     * @param info - The info object to increment with the values from this `FontCatalog`.
     */
    updateMemoryUsage(info: MemoryUsage): void;
    private createReplacementGlyph;
    private loadAssets;
    private loadPage;
    private getAssetsPath;
}
//# sourceMappingURL=FontCatalog.d.ts.map