import * as THREE from "three";
/**
 * Unit of measurement used to specify a font's size.
 */
export declare enum FontUnit {
    Em = 0,
    Pixel = 1,
    Point = 2,
    Percent = 3
}
/**
 * Pair of unit and size specifying a font's size.
 */
export interface FontSize {
    unit: FontUnit;
    size: number;
    backgroundSize: number;
}
/**
 * Style to be used when rendering glyphs.
 */
export declare enum FontStyle {
    Regular = 0,
    Bold = 1,
    Italic = 2,
    BoldItalic = 3
}
/**
 * Variant to be used when rendering.
 */
export declare enum FontVariant {
    Regular = 0,
    AllCaps = 1,
    SmallCaps = 2
}
/**
 * Vertical alignment to be used when placing text.
 */
export declare enum VerticalAlignment {
    Above = 0,
    Center = -0.5,
    Below = -1
}
/**
 * Horizontal alignment to be used when placing text.
 */
export declare enum HorizontalAlignment {
    Left = 0,
    Center = -0.5,
    Right = -1
}
/**
 * Vertical position of text area relative to the placement context (point, line).
 */
export declare enum VerticalPlacement {
    Top = 0,
    Center = -0.5,
    Bottom = -1
}
/**
 * Horizontal position of text element relative to the placement context (point, line).
 *
 * @note [[HorizontalPlacement]] value is exactly opposite to [[HorizontalAlignment]] value,
 * cause when you place text on the right side of point (or icon) it will be left-aligned.
 */
export declare enum HorizontalPlacement {
    Left = -1,
    Center = -0.5,
    Right = 0
}
export interface TextPlacement {
    v: VerticalPlacement;
    h: HorizontalPlacement;
}
export declare type TextPlacements = TextPlacement[];
/**
 * Text wrapping rule used when `lineWidth` is reached.
 */
export declare enum WrappingMode {
    None = 0,
    Character = 1,
    Word = 2
}
/**
 * @hidden
 * @internal
 * Utility function that gets deduced [[HorizontalAlignment]] from [[HorizontalPlacement]].
 * Horizontal alignments are exactly opposite to the placements.
 */
export declare function hAlignFromPlacement(hP: HorizontalPlacement): HorizontalAlignment;
/**
 * @hidden
 * @internal
 * Utility function that gets deduced [[VerticalAlignment]] from [[VerticalPlacement]].
 */
export declare function vAlignFromPlacement(vP: VerticalPlacement): VerticalAlignment;
/**
 * @hidden
 * @internal
 * Utility function that gets deduced [[HorizontalPlacement]] from [[HorizontalAlignment]].
 * Horizontal placements are exactly opposite to the alignment values.
 */
export declare function hPlacementFromAlignment(hA: HorizontalAlignment): HorizontalPlacement;
/**
 * @hidden
 * @internal
 * Utility function that gets deduced [[VerticalPlacement]] from [[VerticalAlignment]].
 */
export declare function vPlacementFromAlignment(vA: VerticalAlignment): VerticalPlacement;
/**
 * Namespace containing default values for all members of [[TextRenderParameters]] and
 * [[TextLayoutParameters]].
 */
export declare namespace DefaultTextStyle {
    const DEFAULT_FONT_NAME: string;
    const DEFAULT_FONT_SIZE: FontSize;
    const DEFAULT_FONT_STYLE: FontStyle;
    const DEFAULT_FONT_VARIANT: FontVariant;
    const DEFAULT_ROTATION: number;
    const DEFAULT_COLOR: THREE.Color;
    const DEFAULT_OPACITY: number;
    const DEFAULT_BACKGROUND_COLOR: THREE.Color;
    const DEFAULT_BACKGROUND_OPACITY: number;
    const DEFAULT_TRACKING: number;
    const DEFAULT_LEADING: number;
    const DEFAULT_MAX_LINES: number;
    const DEFAULT_LINE_WIDTH: number;
    const DEFAULT_CANVAS_ROTATION: number;
    const DEFAULT_LINE_ROTATION: number;
    const DEFAULT_WRAPPING_MODE: WrappingMode;
    const DEFAULT_VERTICAL_ALIGNMENT: VerticalAlignment;
    const DEFAULT_HORIZONTAL_ALIGNMENT: HorizontalAlignment;
    const DEFAULT_PLACEMENTS: TextPlacement[];
}
/**
 * [[TextCanvas]] text rendering parameters.
 */
export interface TextRenderParameters {
    fontName?: string;
    fontSize?: FontSize;
    fontStyle?: FontStyle;
    fontVariant?: FontVariant;
    rotation?: number;
    color?: THREE.Color;
    backgroundColor?: THREE.Color;
    opacity?: number;
    backgroundOpacity?: number;
}
/**
 * [[TextCanvas]] text rendering style.
 */
export declare class TextRenderStyle {
    private m_params;
    /**
     * Creates a new `TextRenderStyle`.
     *
     * @param params - Input [[TextRenderParameters]].
     *
     * @returns New `TextRenderStyle`.
     */
    constructor(params?: TextRenderParameters);
    /**
     * Current [[TextRenderParameters]] for this style.
     */
    get params(): TextRenderParameters;
    set params(value: TextRenderParameters);
    /**
     * Name of the preferred [[Font]] to be used when rendering.
     */
    get fontName(): string;
    set fontName(value: string);
    /**
     * Collection of unit and sizes to apply for the currently active [[Font]].
     */
    get fontSize(): FontSize;
    set fontSize(value: FontSize);
    /**
     * Glyph style to apply for the currently active [[Font]].
     */
    get fontStyle(): FontStyle;
    set fontStyle(value: FontStyle);
    /**
     * Glyph variant to apply for the currently active [[Font]].
     */
    get fontVariant(): FontVariant;
    set fontVariant(value: FontVariant);
    /**
     * Glyph local rotation (radians).
     */
    get rotation(): number;
    set rotation(value: number);
    /**
     * Glyph color.
     */
    get color(): THREE.Color;
    set color(value: THREE.Color);
    /**
     * Glyph background color.
     */
    get backgroundColor(): THREE.Color;
    set backgroundColor(value: THREE.Color);
    /**
     * Glyph opacity.
     */
    get opacity(): number;
    set opacity(value: number);
    /**
     * Glyph background opacity.
     */
    get backgroundOpacity(): number;
    set backgroundOpacity(value: number);
    /**
     * Clone this [[TextRenderStyle]].
     *
     * @param params - Input [[TextRenderParameters]].
     *
     * @returns Cloned [[TextRenderStyle]].
     */
    clone(params?: TextRenderParameters): TextRenderStyle;
    /**
     * Copy other [[TextRenderStyle]] properties into this object instance.
     *
     * @param source - The source object to be copied.
     *
     * @returns reference to `this` object.
     */
    copy(source: TextRenderStyle): TextRenderStyle;
}
/**
 * [[TextCanvas]] text layout parameters.
 */
export interface TextLayoutParameters {
    tracking?: number;
    leading?: number;
    maxLines?: number;
    lineWidth?: number;
    canvasRotation?: number;
    lineRotation?: number;
    wrappingMode?: WrappingMode;
    verticalAlignment?: VerticalAlignment;
    horizontalAlignment?: HorizontalAlignment;
    placements?: TextPlacements;
}
/**
 * [[TextCanvas]] text rendering style.
 */
export declare class TextLayoutStyle {
    private m_params;
    /**
     * Creates a new `TextLayoutStyle`.
     *
     * @param params - Input [[TextLayoutParameters]].
     *
     * @returns New `TextLayoutStyle`.
     */
    constructor(params?: TextLayoutParameters);
    /**
     * Current [[TextLayoutParameters]] for this style.
     */
    get params(): TextLayoutParameters;
    set params(value: TextLayoutParameters);
    /**
     * Inter-glyph spacing (pixels). Scaled by [[FontSize]].
     */
    get tracking(): number;
    set tracking(value: number);
    /**
     * Inter-line spacing (pixels). Scaled by [[FontSize]].
     */
    get leading(): number;
    set leading(value: number);
    /**
     * Maximum number of lines to be considered when using [[TextCanvas]].
     */
    get maxLines(): number;
    set maxLines(value: number);
    /**
     * Maximum line width (pixels).
     */
    get lineWidth(): number;
    set lineWidth(value: number);
    /**
     * [[TextCanvas]] rotation (radians).
     */
    get canvasRotation(): number;
    set canvasRotation(value: number);
    /**
     * Line typesetting rotation (radians).
     */
    get lineRotation(): number;
    set lineRotation(value: number);
    /**
     * Wrapping (line-breaking) mode.
     */
    get wrappingMode(): WrappingMode;
    set wrappingMode(value: WrappingMode);
    /**
     * Text position regarding the baseline.
     */
    get verticalAlignment(): VerticalAlignment;
    set verticalAlignment(value: VerticalAlignment);
    /**
     * Text position inside a line.
     */
    get horizontalAlignment(): HorizontalAlignment;
    set horizontalAlignment(value: HorizontalAlignment);
    /**
     * Text placement options relative to label anchor (origin).
     *
     * @note [[TextPlacement]]s options may override alignment settings.
     */
    get placements(): TextPlacements;
    set placements(value: TextPlacements);
    /**
     * Clone this [[TextLayoutStyle]].
     *
     * @param params - Input [[TextLayoutParameters]].
     *
     * @returns Cloned [[TextLayoutStyle]].
     */
    clone(params?: TextLayoutParameters): TextLayoutStyle;
    /**
     * Copy other [[TextLayoutStyle]] properties into this object instance.
     *
     * @param other - The object to be copied.
     *
     * @returns reference to `this` object.
     */
    copy(other: TextLayoutStyle): TextLayoutStyle;
}
/**
 * Deduce alignment and placement attributes depending on the availability.
 *
 * If placement is defined it may override alignment settings, if no attributes are
 * provided they may be retrieved from defaults.
 *
 * @param hAlignment - The optional horizontal alignment.
 * @param vAlignment - The vertical alignment - optional.
 * @param placementsOpt - Possible text placements - optional.
 * @internal
 */
export declare function resolvePlacementAndAlignment(hAlignment?: HorizontalAlignment, vAlignment?: VerticalAlignment, placementsOpt?: TextPlacements): {
    horizontalAlignment: HorizontalAlignment;
    verticalAlignment: VerticalAlignment;
    placements: TextPlacements;
};
//# sourceMappingURL=TextStyle.d.ts.map