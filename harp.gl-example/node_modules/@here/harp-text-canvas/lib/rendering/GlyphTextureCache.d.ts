import * as THREE from "three";
import { GlyphData } from "./GlyphData";
/**
 * @hidden
 * Information stored for every entry in a [[GlyphTextureCache]].
 */
export interface GlyphCacheEntry {
    glyphData: GlyphData;
    location: THREE.Vector2;
}
/**
 * @hidden
 * Unified glyph SDF bitmap storage for all fonts in a [[FontCatalog]].
 * Implemented as an abstraction layer on top of an LRUCache and WebGLRenderTarget.
 */
export declare class GlyphTextureCache {
    readonly capacity: number;
    readonly entryWidth: number;
    readonly entryHeight: number;
    private readonly m_cacheWidth;
    private readonly m_cacheHeight;
    private readonly m_textureSize;
    private readonly m_entryCache;
    private readonly m_scene;
    private readonly m_camera;
    private readonly m_rt;
    private readonly m_copyTextureSet;
    private readonly m_copyTransform;
    private readonly m_copyPositions;
    private m_copyMaterial?;
    private m_copyVertexBuffer;
    private readonly m_copyPositionAttribute;
    private readonly m_copyUVAttribute;
    private readonly m_copyGeometry;
    private m_copyMesh;
    private m_copyGeometryDrawCount;
    private m_clearMaterial?;
    private m_clearPositionAttribute;
    private readonly m_clearGeometry;
    private m_clearMesh;
    private m_clearGeometryDrawCount;
    /**
     * Creates a `GlyphTextureCache` object.
     *
     * @param capacity - Cache's maximum glyph capacity.
     * @param entryWidth - Maximum entry width.
     * @param entryHeight - Maximum entry height.
     *
     * @returns New `GlyphTextureCache`.
     */
    constructor(capacity: number, entryWidth: number, entryHeight: number);
    /**
     * Release all allocated resources.
     */
    dispose(): void;
    /**
     * Internal WebGL Texture.
     */
    get texture(): THREE.Texture;
    /**
     * Internal WebGL Texture size.
     */
    get textureSize(): THREE.Vector2;
    /**
     * Add a new entry to the GlyphTextureCache. If the limit of entries is hit, the least requested
     * entry will be replaced.
     *
     * @param hash - Entry's hash.
     * @param glyph - Entry's glyph data.
     */
    add(hash: string, glyph: GlyphData): void;
    /**
     * Checks if an entry is in the cache.
     *
     * @param hash - Entry's hash.
     *
     * @returns Test result.
     */
    has(hash: string): boolean;
    /**
     * Retrieves an entry from the cache.
     *
     * @param hash - Entry's hash.
     *
     * @returns Retrieval result.
     */
    get(hash: string): GlyphCacheEntry | undefined;
    /**
     * Clears the internal LRUCache.
     */
    clear(): void;
    /**
     * Updates the internal WebGLRenderTarget.
     * The update will copy the newly introduced glyphs since the previous update.
     *
     * @param renderer - WebGLRenderer.
     */
    update(renderer: THREE.WebGLRenderer): void;
    private initCacheEntries;
    private copyGlyphToCache;
    private clearCacheEntry;
}
//# sourceMappingURL=GlyphTextureCache.d.ts.map