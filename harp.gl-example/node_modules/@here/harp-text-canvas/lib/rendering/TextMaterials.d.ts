import * as THREE from "three";
interface RendererMaterialParameters {
    rendererCapabilities: THREE.WebGLCapabilities;
}
interface RawShaderMaterialParameters extends THREE.ShaderMaterialParameters {
    rendererCapabilities: THREE.WebGLCapabilities;
}
declare class RawShaderMaterial extends THREE.RawShaderMaterial {
    /**
     * The constructor of `RawShaderMaterial`.
     *
     * @param params - `RawShaderMaterial` parameters.  Always required except when cloning
     * another material.
     */
    constructor(params?: RawShaderMaterialParameters);
}
/**
 * @hidden
 * Material used for clearing glyphs from a [[GlyphTextureCache]].
 */
export declare class GlyphClearMaterial extends RawShaderMaterial {
    /**
     * Creates a new `GlyphClearMaterial`.
     * @param params - Material parameters. Always required except when cloning another
     * material.
     * @returns New `GlyphClearMaterial`.
     */
    constructor(params?: RendererMaterialParameters);
}
/**
 * @hidden
 * Material used for copying glyphs into a [[GlyphTextureCache]].
 */
export declare class GlyphCopyMaterial extends RawShaderMaterial {
    /**
     * Creates a new `GlyphCopyMaterial`.
     * @param params - Material parameters. Always required except when cloning another
     * material.
     * @returns New `GlyphCopyMaterial`.
     */
    constructor(params?: RawShaderMaterialParameters);
}
/**
 * @hidden
 * Material parameters passed on [[SdfTextMaterial]] creation.
 */
export interface SdfTextMaterialParameters extends RendererMaterialParameters {
    texture: THREE.Texture;
    textureSize: THREE.Vector2;
    size: number;
    distanceRange: number;
    isMsdf: boolean;
    isBackground: boolean;
    vertexSource?: string;
    fragmentSource?: string;
}
/**
 * Material designed to render transformable, high quality SDF text.
 */
export declare class SdfTextMaterial extends RawShaderMaterial {
    /**
     * Creates a new `SdfTextMaterial`.
     *
     * @param params - Material parameters. Always required except when cloning another
     * material.
     * @returns New `SdfTextMaterial`.
     */
    constructor(params?: SdfTextMaterialParameters);
}
export {};
//# sourceMappingURL=TextMaterials.d.ts.map