"use strict";
/*
 * Copyright (C) 2017-2020 HERE Europe B.V.
 * Licensed under Apache 2.0, see full license in LICENSE
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHighPrecisionLineMaterial = exports.HighPrecisionLineMaterial = void 0;
const THREE = require("three");
const RawShaderMaterial_1 = require("./RawShaderMaterial");
const LinesChunks_1 = require("./ShaderChunks/LinesChunks");
const vertexSource = `
#ifdef USE_COLOR
attribute vec4 color;
varying vec3 vColor;
#endif

// uniforms to implement double-precision
uniform mat4 u_mvp;             // combined modelView and projection matrix
uniform vec3 u_eyepos;          // eye position major
uniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)

// vertex attributes
attribute vec3 position;        // high part
attribute vec3 positionLow;     // low part

#include <high_precision_vert_func>

void main() {
    #ifdef USE_COLOR
    vColor = color.rgb;
    #endif

    vec3 pos = subtractDblEyePos(position);
    gl_Position = u_mvp * vec4(pos, 1.0);
}`;
const fragmentSource = `
precision highp float;
precision highp int;

uniform vec3 diffuse;
uniform float opacity;

#ifdef USE_COLOR
varying vec3 color;
#endif

void main() {
    #ifdef USE_COLOR
    gl_FragColor = vec4( diffuse * vColor, opacity );
    #else
    gl_FragColor = vec4( diffuse, opacity );
    #endif
}`;
/**
 * Material designed to render high precision lines (ideal for position-sensible data).
 */
class HighPrecisionLineMaterial extends RawShaderMaterial_1.RawShaderMaterial {
    /**
     * Constructs a new `HighPrecisionLineMaterial`.
     *
     * @param params - `HighPrecisionLineMaterial` parameters.  Always required except when cloning
     * another material.
     */
    constructor(params) {
        Object.assign(THREE.ShaderChunk, LinesChunks_1.default);
        const shaderParams = params
            ? {
                name: "HighPrecisionLineMaterial",
                vertexShader: vertexSource,
                fragmentShader: fragmentSource,
                uniforms: {
                    diffuse: new THREE.Uniform(new THREE.Color(HighPrecisionLineMaterial.DEFAULT_COLOR)),
                    opacity: new THREE.Uniform(HighPrecisionLineMaterial.DEFAULT_OPACITY),
                    u_mvp: new THREE.Uniform(new THREE.Matrix4()),
                    u_eyepos: new THREE.Uniform(new THREE.Vector3()),
                    u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())
                },
                rendererCapabilities: params.rendererCapabilities
            }
            : undefined;
        Object.assign(shaderParams, params);
        super(shaderParams);
        this.type = "HighPrecisionLineMaterial";
        this.isHighPrecisionLineMaterial = true;
        // Apply initial parameter values.
        if (params) {
            if (params.color !== undefined) {
                this.color.set(params.color);
            }
            if (params.opacity !== undefined) {
                this.opacity = params.opacity;
            }
        }
        this.updateTransparencyFeature();
    }
    /**
     * Line color.
     */
    get color() {
        return this.uniforms.diffuse.value;
    }
    set color(value) {
        this.uniforms.diffuse.value.copy(value);
    }
    updateTransparencyFeature() {
        this.transparent = this.opacity < 1.0 ? true : false;
    }
}
exports.HighPrecisionLineMaterial = HighPrecisionLineMaterial;
HighPrecisionLineMaterial.DEFAULT_COLOR = 0x000050;
HighPrecisionLineMaterial.DEFAULT_OPACITY = 1.0;
function isHighPrecisionLineMaterial(material) {
    return (material !== undefined &&
        material.isHighPrecisionLineMaterial === true);
}
exports.isHighPrecisionLineMaterial = isHighPrecisionLineMaterial;
//# sourceMappingURL=HighPrecisionLineMaterial.js.map