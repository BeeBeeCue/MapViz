import * as THREE from "three";
import { DisplacementFeature, DisplacementFeatureParameters } from "./DisplacementFeature";
import { ExtrusionFeature, ExtrusionFeatureParameters, FadingFeature, FadingFeatureParameters } from "./MapMeshMaterials";
import { RawShaderMaterial, RendererMaterialParameters } from "./RawShaderMaterial";
/**
 * Parameters used when constructing a new {@link EdgeMaterial}.
 */
export interface EdgeMaterialParameters extends FadingFeatureParameters, DisplacementFeatureParameters, ExtrusionFeatureParameters, RendererMaterialParameters {
    /**
     * Edge color.
     */
    color?: number | string;
    /**
     * Color mix value. Mixes between vertexColors and edgeColor.
     */
    colorMix?: number;
    /**
     * Defines whether vertex coloring is used.
     * @defaultValue false
     */
    vertexColors?: boolean;
}
/**
 * Material designed to render the edges of extruded buildings using GL_LINES. It supports solid
 * colors, vertex colors, color mixing and distance fading.
 */
export declare class EdgeMaterial extends RawShaderMaterial implements FadingFeature, ExtrusionFeature, DisplacementFeature {
    static DEFAULT_COLOR: number;
    static DEFAULT_COLOR_MIX: number;
    /**
     * Constructs a new `EdgeMaterial`.
     *
     * @param params - `EdgeMaterial` parameters. Always required except when cloning another
     * material.
     */
    constructor(params?: EdgeMaterialParameters);
    /**
     * The color of the object that is rendered
     * together with this edge.
     *
     * @remarks
     * The final color of the edge is computed by
     * interpolating the {@link edgeColor} with this color
     * using the {@link colorMix} factor.
     *
     * Note that {@link objectColor} is used only
     * when the geometry associated with this material
     * does not have a vertex color buffer.
     *
     */
    get objectColor(): THREE.Color;
    set objectColor(value: THREE.Color);
    /**
     * Edge color.
     */
    get color(): THREE.Color;
    set color(value: THREE.Color);
    get lineWidth(): number;
    /**
     * Only lineWidth of 0 and 1 is supported.
     * lineWidth <= 0 will result in not visible lines, everything else into lines
     * visible with lineWidth 1
     */
    set lineWidth(value: number);
    /**
     * Color mix value. Mixes between vertexColors and edgeColor.
     */
    get colorMix(): number;
    set colorMix(value: number);
    get fadeNear(): number;
    set fadeNear(value: number);
    get fadeFar(): number;
    set fadeFar(value: number);
    get extrusionRatio(): number;
    set extrusionRatio(value: number);
    get displacementMap(): THREE.Texture | null;
    set displacementMap(map: THREE.Texture | null);
}
//# sourceMappingURL=EdgeMaterial.d.ts.map