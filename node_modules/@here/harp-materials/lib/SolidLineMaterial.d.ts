import { LineCaps, LineDashes } from "@here/harp-datasource-protocol";
import * as THREE from "three";
import { DisplacementFeature, DisplacementFeatureParameters } from "./DisplacementFeature";
import { FadingFeature, FadingFeatureParameters } from "./MapMeshMaterials";
import { RawShaderMaterial, RendererMaterialParameters } from "./RawShaderMaterial";
export declare enum LineDashesModes {
    DASHES_SQUARE = 0,
    DASHES_ROUND = 1,
    DASHES_DIAMOND = 2
}
/**
 * Parameters used when constructing a new {@link SolidLineMaterial}.
 */
export interface SolidLineMaterialParameters extends FadingFeatureParameters, DisplacementFeatureParameters, RendererMaterialParameters {
    /**
     * Line color.
     */
    color?: number | string;
    /**
     * Line outline color.
     */
    outlineColor?: number | string;
    /**
     * Enables/Disable depth test.
     */
    depthTest?: boolean;
    /**
     * Enables/Disable depth write.
     */
    depthWrite?: boolean;
    /**
     * `SolidLineMaterial` extends the ThreeJS `RawShaderMaterial` that does not update fog at
     * runtime, so instead of recompiling everything we pass it in the constructor.
     */
    fog?: boolean;
    /**
     * Line width.
     */
    lineWidth?: number;
    /**
     * Outline width.
     */
    outlineWidth?: number;
    /**
     * Line opacity.
     */
    opacity?: number;
    /**
     * Describes line caps type (`"None"`, `"Round"`, `"Square"`, `"TriangleOut"`, `"TriangleIn"`).
     * Default is `"Round"`.
     */
    caps?: LineCaps;
    /**
     * Describes the starting drawing position for the line (in the range [0...1]).
     * Default is `0.0`.
     */
    drawRangeStart?: number;
    /**
     * Describes the ending drawing position for the line (in the range [0...1]).
     * Default is `1.0`.
     */
    drawRangeEnd?: number;
    /**
     * Describes line dash type (`"Round"`, `"Square"`, `"Diamond"`).
     * Default is `"Square"`.
     */
    dashes?: LineDashes;
    /**
     * Line dashes color.
     */
    dashColor?: number | string;
    /**
     * Size of the dashed segments.
     */
    dashSize?: number;
    /**
     * Size of the gaps between dashed segments.
     */
    gapSize?: number;
    /**
     * How much to offset in world units.
     */
    offset?: number;
}
/**
 * Material designed to render solid variable-width lines.
 */
export declare class SolidLineMaterial extends RawShaderMaterial implements DisplacementFeature, FadingFeature {
    static DEFAULT_COLOR: number;
    static DEFAULT_WIDTH: number;
    static DEFAULT_OUTLINE_WIDTH: number;
    static DEFAULT_OPACITY: number;
    static DEFAULT_DRAW_RANGE_START: number;
    static DEFAULT_DRAW_RANGE_END: number;
    static DEFAULT_DASH_SIZE: number;
    static DEFAULT_GAP_SIZE: number;
    static DEFAULT_OFFSET: number;
    /**
     * @hidden
     * Material properties overrides.
     */
    private m_fog;
    private m_opacity;
    /**
     * Constructs a new `SolidLineMaterial`.
     *
     * @param params - `SolidLineMaterial` parameters. Always required except when cloning another
     * material.
     */
    constructor(params?: SolidLineMaterialParameters);
    /**
     * Overrides THREE.Material.fog flag to add support for custom shader.
     *
     * @param enable - Whether we want to enable the fog.
     */
    set fog(enable: boolean);
    /**
     * Checks if fog is enabled.
     */
    get fog(): boolean;
    /**
     * Sets the offset used to shift the line in world space perpendicular to the direction.
     */
    set offset(offset: number);
    /**
     * @return The offset to shift the line in world space perpendicular to the direction.
     */
    get offset(): number;
    /**
     * The method to call to recompile a material to enable/disable outline effect
     *
     * @param enable - Whether we want to use outline.
     */
    set outline(enable: boolean);
    /**
     * Checks if outline is enabled.
     */
    get outline(): boolean;
    /**
     * Line opacity.
     */
    get opacity(): number;
    set opacity(value: number);
    /**
     * Line color.
     */
    get color(): THREE.Color;
    set color(value: THREE.Color);
    /**
     * Outline color.
     *
     * @note The width of outline ([[outlineWidth]]) need to be also set to enable outlining.
     */
    get outlineColor(): THREE.Color;
    set outlineColor(value: THREE.Color);
    /**
     * Dash color.
     *
     * @note The property [[gapSize]] need to be set to enable dashed line.
     */
    get dashColor(): THREE.Color;
    set dashColor(value: THREE.Color);
    /**
     * Line width.
     */
    get lineWidth(): number;
    set lineWidth(value: number);
    /**
     * Outline width.
     */
    get outlineWidth(): number;
    set outlineWidth(value: number);
    /**
     * Size of the dashed segments.
     *
     * @note Ths [[gapSize]] need to be also set to enable dashed line.
     * @see gapSize.
     */
    get dashSize(): number;
    set dashSize(value: number);
    /**
     * Size of the gaps between dashed segments.
     *
     * @note You may also need to set [[dashSize]].
     * @see dashSize.
     */
    get gapSize(): number;
    set gapSize(value: number);
    /**
     * Caps mode.
     */
    get caps(): LineCaps;
    set caps(value: LineCaps);
    /**
     * Dashes mode.
     */
    get dashes(): LineDashes;
    set dashes(value: LineDashes);
    get fadeNear(): number;
    set fadeNear(value: number);
    get fadeFar(): number;
    set fadeFar(value: number);
    get displacementMap(): THREE.Texture | null;
    set displacementMap(map: THREE.Texture | null);
    get drawRangeStart(): number;
    set drawRangeStart(value: number);
    get drawRangeEnd(): number;
    set drawRangeEnd(value: number);
    set clipTileSize(tileSize: THREE.Vector2);
    get clipTileSize(): THREE.Vector2;
    copy(other: SolidLineMaterial): this;
    private invalidateFog;
    private invalidateOpacity;
}
//# sourceMappingURL=SolidLineMaterial.d.ts.map