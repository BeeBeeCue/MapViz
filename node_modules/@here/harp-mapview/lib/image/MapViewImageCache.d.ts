import { MapView } from "../MapView";
import { ImageItem } from "./Image";
/**
 * Cache images wrapped into {@link ImageItem}s for a {@link MapView}.
 *
 * @remarks
 * An image may have multiple names in a theme, the `MapViewImageCache` maps different names to the
 * same image URL, and allows to share the image by URL to different MapViews.
 * Within a MapView instance, the (optional) name is unique, so registering multiple images with the
 * same name is invalid.
 *
 * The `MapViewImageCache` uses a global {@link ImageCache} to actually store (and generate) the
 * image data.
 */
export declare class MapViewImageCache {
    mapView: MapView;
    private m_name2Url;
    private m_url2Name;
    /**
     * The constructor for `MapViewImageCache`.
     *
     * @param mapView - a {@link MapView} instance.
     */
    constructor(mapView: MapView);
    /**
     * Register an existing image by name.
     *
     * @param name - Name of the image from {@link @here/harp-datasource-protocol#Theme}.
     * @param url - URL of image.
     * @param image - Optional {@link ImageData} of image.
     * @param htmlElement - Optional raw data in case {@link HTMLImageElement} or {@link HTMLCanvasElement} reference is available.
     *                In that case url is used as a unique identifier to avoid image duplicates and the specified
     *                raw data is used for the rendering.
     */
    registerImage(name: string | undefined, url: string, image?: ImageData | ImageBitmap, htmlElement?: HTMLImageElement | HTMLCanvasElement): ImageItem;
    /**
     * Add an image and optionally start loading it. Once done, the [[ImageData]] or [[ImageBitmap]]
     * will be stored in the {@link ImageItem}.
     *
     * Names are unique within a {@link MapView}. URLs are not unique, multiple images with
     * different names can have the same URL. Still, URLs are are loaded only once.
     *
     * @param name - Name of image from {@link @here/harp-datasource-protocol#Theme}.
     * @param url URL of image.
     * @param htmlElement Optional raw data in case HTMLImageElement or HTMLCanvasElement reference is available.
     *                In that case url is used as a unique identifier to avoid image duplicates and the specified
     *                raw data is used for the rendering.
     * @param startLoading Optional. Pass `true` to start loading the image in the background or
     *  to start rendering the htmlElement if available.
     */
    addImage(name: string, url: string, startLoading?: boolean, htmlElement?: HTMLImageElement | HTMLCanvasElement): ImageItem | Promise<ImageItem | undefined>;
    /**
     * Remove the image with this name from the cache.
     *
     * @param name - Name of the image.
     * @returns `true` if item has been removed.
     */
    removeImage(name: string): boolean;
    /**
     * Remove images using the URL from the cache.
     *
     * @param url - URL of the image.
     * @returns `true` if image has been removed. If multiple images are referring to the same
     * image URL, they are all removed.
     */
    removeImageByUrl(url: string): boolean;
    /**
     * Remove images from the cache.
     *
     * @param itemFilter - Filter to identify images to remove. Should return `true` if item
     * should be removed.
     * @returns Number of images removed.
     */
    removeImages(itemFilter: (name: string, url: string) => boolean): number;
    /**
     * Find {@link ImageItem} by its name.
     *
     * @param name - Name of image.
     */
    findImageByName(name: string): ImageItem | undefined;
    /**
     * Find {@link ImageItem} by URL.
     *
     * @param url - Url of image.
     */
    findImageByUrl(url: string): ImageItem | undefined;
    /**
     * Load an {@link ImageItem}. Returns a promise or a loaded {@link ImageItem}.
     *
     * @param imageItem - ImageItem to load.
     */
    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined>;
    /**
     * Remove all {@link ImageItem}s from the cache.
     *
     * @remarks
     * Also removes all {@link ImageItem}s that belong to this
     * {@link MapView} from the global {@link ImageCache}.
     * @returns Number of images removed.
     */
    clear(): number;
    /**
     * Returns number of mappings from name to URL in the cache. Only items with a name can get
     * mapped to URL.
     */
    get numberOfNames(): number;
    /**
     * Returns number of mappings from URL to name in the cache. Only items with a name can get
     * mapped from URL to name.
     */
    get numberOfUrls(): number;
    /**
     * Return `true` if an image with the given name is known.
     *
     * @param name - Name of the image.
     */
    hasName(name: string): boolean;
    /**
     * Return `true` if an image with the given URL is known. Only items with a name can get
     * mapped from URL to name.
     *
     * @param url - URL of image.
     */
    hasUrl(url: string): boolean;
    /**
     * Return the names under which an image with the given URL is saved. Only items with a name
     * can get mapped from URL to name.
     */
    findNames(url: string): string[] | undefined;
    /**
     * Remove the image with this name from the cache.
     *
     * @param name - Name of the image.
     * @returns `true` if item has been removed.
     */
    private removeImageInternal;
}
//# sourceMappingURL=MapViewImageCache.d.ts.map