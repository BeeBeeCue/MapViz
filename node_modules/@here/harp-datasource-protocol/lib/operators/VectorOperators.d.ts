import * as THREE from "three";
import { Value } from "../Env";
import { CallExpr } from "../Expr";
import { ExprEvaluatorContext, OperatorDescriptorMap } from "../ExprEvaluator";
declare type MakeVectorCallExpr = CallExpr & {
    _value?: THREE.Vector2 | THREE.Vector3 | THREE.Vector4;
};
declare const operators: {
    "make-vector": {
        call: (context: ExprEvaluatorContext, call: MakeVectorCallExpr) => THREE.Vector3 | THREE.Vector2 | THREE.Vector4;
    };
    vector2: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => Value;
    };
    vector3: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => Value;
    };
    vector4: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => Value;
    };
    "to-vector2": {
        call: (context: ExprEvaluatorContext, call: CallExpr) => Value;
    };
    "to-vector3": {
        call: (context: ExprEvaluatorContext, call: CallExpr) => Value;
    };
    "to-vector4": {
        call: (context: ExprEvaluatorContext, call: CallExpr) => Value;
    };
};
export declare const VectorOperators: OperatorDescriptorMap;
export declare type VectorOperatorNames = keyof typeof operators;
export {};
//# sourceMappingURL=VectorOperators.d.ts.map