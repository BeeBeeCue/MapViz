import { CallExpr } from "../Expr";
import { ExprEvaluatorContext, OperatorDescriptorMap } from "../ExprEvaluator";
declare const operators: {
    "^": {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    "-": {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    "/": {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    "%": {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    "+": {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    "*": {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    abs: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    acos: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    asin: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    atan: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    ceil: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    cos: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    e: {
        call: () => number;
    };
    floor: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    ln: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    ln2: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    log10: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    max: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    min: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    /**
     * Clamp numeric value to given range, inclusive.
     *
     * Synopsis:
     * ```
     * ["clamp", v: number, min: number, max: number]`
     * ```
     */
    clamp: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    pi: {
        call: () => number;
    };
    round: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    sin: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    sqrt: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
    tan: {
        call: (context: ExprEvaluatorContext, call: CallExpr) => number;
    };
};
export declare const MathOperators: OperatorDescriptorMap;
export declare type MathOperatorNames = keyof typeof operators;
export {};
//# sourceMappingURL=MathOperators.d.ts.map