"use strict";
/*
 * Copyright (C) 2017-2020 HERE Europe B.V.
 * Licensed under Apache 2.0, see full license in LICENSE
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RGBA = void 0;
const three_1 = require("three");
const ColorUtils_1 = require("./ColorUtils");
const StringEncodedNumeral_1 = require("./StringEncodedNumeral");
/**
 * A class representing RGBA colors.
 *
 * @hidden
 * @internal
 */
class RGBA {
    /**
     * Constructs a [[RGBA]] color using the given components in the [0..1] range.
     */
    constructor(r = 1, g = 1, b = 1, a = 1) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
    /**
     * Parses a string describing a color.
     *
     * @param text - The string color literal
     */
    static parse(text) {
        const color = StringEncodedNumeral_1.parseStringEncodedColor(text);
        if (color === undefined) {
            return undefined;
        }
        return ColorUtils_1.ColorUtils.getRgbaFromHex(color);
    }
    /**
     * Clones this [[RGBA]] color.
     */
    clone() {
        return new RGBA(this.r, this.g, this.b, this.a);
    }
    /**
     * Returns this color encoded as one single number.
     */
    getHex() {
        return ColorUtils_1.ColorUtils.getHexFromRgba(this.r, this.g, this.b, this.a);
    }
    /**
     * Linearly interpolate the components of this color.
     */
    lerp(target, t) {
        this.r = three_1.MathUtils.lerp(this.r, target.r, t);
        this.g = three_1.MathUtils.lerp(this.g, target.g, t);
        this.b = three_1.MathUtils.lerp(this.b, target.b, t);
        this.a = three_1.MathUtils.lerp(this.a, target.a, t);
        return this;
    }
    /**
     * Returns this color encoded as JSON literal.
     */
    toJSON() {
        return `rgba(${(this.r * 255) << 0}, ${(this.g * 255) << 0}, ${(this.b * 255) << 0}, ${this.a})`;
    }
}
exports.RGBA = RGBA;
//# sourceMappingURL=RGBA.js.map