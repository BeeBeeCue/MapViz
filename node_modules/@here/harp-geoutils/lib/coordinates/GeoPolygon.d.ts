import { GeoBox } from "./GeoBox";
import { GeoCoordinates } from "./GeoCoordinates";
import { GeoCoordinatesLike } from "./GeoCoordinatesLike";
import { GeoCoordLike } from "./GeoCoordLike";
import { GeoPolygonLike } from "./GeoPolygonLike";
export declare function isAntimeridianCrossing(lonStart: number, lonEnd: number): boolean;
declare type MinThreeItemsArray<T> = [T, T, T, ...T[]];
export declare type GeoPolygonCoordinates = MinThreeItemsArray<GeoCoordinatesLike | GeoCoordinates | GeoCoordLike>;
/**
 * A GeoPolygon in 2D Space (altitudes will be ignored).
 * Coordinates are expected in counter-clockwise order, for convex polygons a sorting is
 * available.
 * Clockwise ordered or selfintersecting Polygons might lead to no or unexpected results.
 *
 * @beta @internal
 */
export declare class GeoPolygon implements GeoPolygonLike {
    private readonly m_coordinates;
    /**
     * Creates a GeoPolygon instance
     *
     * @param coordinates An array of GeoCoordinates acting as the Vertices of the Polygon.
     * @param needsSort  If `true` it will sort the coordinates in ccw order, this will only
     *  result correctly for convex polygons @default false
     * @param needsWrapping  If `true` it will wrap around coordinates crossing the antemeridian.
     * Only supported for polygons with sides that don't span more than 180 degrees longitude.
     * @default false
     */
    constructor(coordinates: GeoPolygonCoordinates, needsSort?: boolean, needsWrapping?: boolean);
    get coordinates(): MinThreeItemsArray<GeoCoordinatesLike>;
    /**
     * Gets a BoundingBox for the Polygon
     *
     * Might have unexpected results for twisted or concave Polygons
     */
    getGeoBoundingBox(): GeoBox;
    /**
     * Gets the Centroid for the Polygon
     *
     * Might be undefined or with unexpected results for twisted or concave Polygons.
     */
    getCentroid(): GeoCoordinates | undefined;
    private sortCCW;
    private wrapCoordinatesAround;
    private getPolyAverageCenter;
    private getArea;
    private getEastAndWest;
    private getNorthAndSouth;
}
export {};
//# sourceMappingURL=GeoPolygon.d.ts.map