import * as THREE from "three";
import { GlyphData } from "../rendering/GlyphData";
import { FontUnit, FontVariant } from "../rendering/TextStyle";
import { UnicodeUtils } from "../utils/UnicodeUtils";
/**
 * Collection of different constants and utility functions used by [[Typesetter]]s.
 */
export declare namespace TypesettingUtils {
    /**
     * Ratio between EMs and Pixels.
     */
    const EM_TO_PX = 16;
    /**
     * Ratio between Points and Pixels.
     */
    const PT_TO_PX = 1.25;
    /**
     * Angle used when emulating italic fonts (oblique).
     */
    const OBLIQUE_ANGLE = 0.174533;
    /**
     * Horizontal offset used when emulating italic fonts (oblique).
     */
    const OBLIQUE_OFFSET: number;
    /**
     * Convert between any size specified in any [[FontUnit]] to pixels.
     *
     * @param size - Font size (specified in `unit`).
     * @param unit - Size unit.
     * @param originalSize - Original size (pixels)
     *
     * @returns Pixel size.
     */
    function getPixelSize(size: number, unit: FontUnit, originalSize: number): number;
    /**
     * Gets the scale applied to a certain character when using the [[FontVariant]].`SmallCaps`.
     *
     * @param glyphs - Array containing [[TransformedGlyphData]].
     * @param index - Index to `glyphDataArray`.
     * @param fontVariant - Currently active [[FontVariant]].
     *
     * @returns Glyph `SmallCaps` scale.
     */
    function getSmallCapsScale(glyphs: GlyphData[], smallCapsTransformations: boolean[], index: number, fontVariant: FontVariant): number;
    /**
     * Returns the first strong direction (LTR or RTL) found for a given array of [[GlyphData]].
     *
     * @param glyphs - Array containing [[GlyphData]].
     * @param offset - `glyphDataArray` offset.
     *
     * @returns Strong direction.
     */
    function getDirection(glyphs: GlyphData[], offset: number): UnicodeUtils.Direction;
    /**
     * Computes the transformation matrix for a glyph.
     *
     * @param transform - Matrix used to store the results.
     * @param position - Glyph' position.
     * @param scale - Glyph' scale.
     * @param rotation - [[TextCanvas]] rotation.
     * @param localRotation - Glyph' local rotation.
     */
    function computeGlyphTransform(transform: THREE.Matrix3, position: THREE.Vector3, scale: number, rotation: number, localRotation: number): void;
    /**
     * Updates the supplied bounds with the computed screen-space corners for a given glyph.
     *
     * @param corners - Glyph' corners.
     * @param globalBounds - Global text bounds.
     * @param individualBounds - Individual per-character bounds.
     */
    function updateBounds(corners: THREE.Vector3[], globalBounds: THREE.Box2, individualBounds?: {
        array: THREE.Box2[];
        offset: number;
    }): void;
}
//# sourceMappingURL=TypesettingUtils.d.ts.map