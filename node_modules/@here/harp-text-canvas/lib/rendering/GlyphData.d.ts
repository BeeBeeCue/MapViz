import * as THREE from "three";
import { UnicodeUtils } from "../utils/UnicodeUtils";
import { Font } from "./FontCatalog";
/**
 * Structure containing all the required information necessary to render a BMFont glyph using
 * [[TextCanvas]].
 */
export declare class GlyphData {
    readonly codePoint: number;
    readonly block: string;
    readonly width: number;
    readonly height: number;
    readonly advanceX: number;
    readonly offsetX: number;
    readonly offsetY: number;
    readonly texture: THREE.Texture;
    readonly font: Font;
    readonly isReplacement: boolean;
    /**
     * Unicode character represented by this glyph.
     */
    readonly character: string;
    /**
     * Glyph' direction.
     */
    readonly direction: UnicodeUtils.Direction;
    /**
     * Array containing the positions for all corners of this glyph.
     */
    positions: THREE.Vector3[];
    /**
     * Array containing the source texture coordinates for all corners of this glyph.
     * Used to sample the original texture atlas pages.
     */
    sourceTextureCoordinates: THREE.Vector2[];
    /**
     * Array containing the dynamic texture coordinates for all corners of this glyph.
     * Used to sample the dynamic texture atlas page.
     */
    dynamicTextureCoordinates: THREE.Vector2[];
    /**
     * Source texture atlas' page copy index.
     */
    copyIndex: number;
    /**
     * Flag indicating if glyph can be currently rendered.
     */
    isInCache: boolean;
    /**
     * Creates a new `GlyphData` object.
     *
     * @param codePoint - Unicode code point.
     * @param block - Unicode block.
     * @param width - Glyph' width.
     * @param height - Glyph' height.
     * @param advanceX - Amount of pixel to move after placing this glyph.
     * @param offsetX - Horizontal offset from the glyph' origin.
     * @param offsetY - Vertical offset from the glyph' origin.
     * @param u0 - Glyph' left texture coordinate.
     * @param v0 - Glyph' bottom texture coordinate.
     * @param u1 - Glyph' right texture coordinate.
     * @param v1 - Glyph' top texture coordinate.
     * @param texture - Glyph' source texture atlas page.
     * @param font - Glyph' font.
     * @param isReplacement - `true` if glyph is a replacement for a missing glyph.
     *
     * @returns New `GlyphData`.
     */
    constructor(codePoint: number, block: string, width: number, height: number, advanceX: number, offsetX: number, offsetY: number, u0: number, v0: number, u1: number, v1: number, texture: THREE.Texture, font: Font, isReplacement?: boolean);
    /**
     * Clone this `GlyphData`.
     *
     * @returns Cloned `GlyphData`.
     */
    clone(): GlyphData;
}
//# sourceMappingURL=GlyphData.d.ts.map