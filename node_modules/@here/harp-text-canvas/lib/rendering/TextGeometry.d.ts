import * as THREE from "three";
import { MemoryUsage } from "../TextCanvas";
import { GlyphData } from "./GlyphData";
import { TextBufferObject } from "./TextBufferObject";
import { TextRenderStyle } from "./TextStyle";
export declare const MAX_CAPACITY = 65536;
export declare const VERTEX_BUFFER_STRIDE = 16;
export declare const INDEX_BUFFER_STRIDE = 1;
export declare const VERTICES_PER_QUAD = 4;
export declare const INDICES_PER_QUAD = 6;
export declare const QUAD_VERTEX_MEMORY_FOOTPRINT: number;
export declare const QUAD_INDEX_MEMORY_FOOTPRINT: number;
/**
 * Procedural geometry that holds vertex attribute data for all glyphs in a [[TextCanvas]].
 */
export declare class TextGeometry {
    readonly scene: THREE.Scene;
    /**
     * Count of currently drawn glyphs.
     */
    get drawCount(): number;
    /**
     * Mesh used to render foreground glyphs.
     */
    get mesh(): THREE.Mesh;
    /**
     * Mesh used to render background glyphs.
     */
    get backgroundMesh(): THREE.Mesh;
    /**
     * Maximum glyph capacity.
     */
    readonly capacity: number;
    private m_currentCapacity;
    private m_drawCount;
    private m_updateOffset;
    private m_vertexBuffer;
    private m_positionAttribute;
    private m_uvAttribute;
    private m_colorAttribute;
    private m_bgColorAttribute;
    private m_indexBuffer;
    private m_geometry;
    private m_mesh;
    private m_bgMesh;
    private m_pickingCount;
    private m_pickingDataArray;
    /**
     * Creates a new `TextGeometry`.
     *
     * @param material - Material used to render foreground glyphs.
     * @param backgroundMaterial - Material used to render background glyphs.
     * @param initialSize - Initial amount of glyphs that can be stored.
     * @param capacity - Maximum glyph capacity.
     *
     * @returns New `TextGeometry`.
     */
    constructor(scene: THREE.Scene, material: THREE.Material, backgroundMaterial: THREE.Material, initialSize: number, capacity: number);
    /**
     * Release all allocated resources.
     */
    dispose(): void;
    /**
     * Clear the geometry.
     */
    clear(): void;
    /**
     * Update the GPU resources to reflect the latest additions to the geometry.
     */
    update(): void;
    /**
     * Add a new glyph to the `TextGeometry`.
     *
     * @param glyphData - [[GlyphData]] holding the glyph description.
     * @param corners - Transformed glyph corners.
     * @param weight - Foreground glyph sampling weight.
     * @param bgWeight - Foreground glyph sampling weight.
     * @param mirrored - If `true`, UVs will be horizontally mirrored (needed for RTL punctuation).
     * @param style - Currently set [[TextRenderStyle]].
     *
     * @returns Result of the addition.
     */
    add(glyphData: GlyphData, corners: THREE.Vector3[], weight: number, bgWeight: number, mirrored: boolean, style: TextRenderStyle): boolean;
    /**
     * Add a new glyph to a text buffer.
     *
     * @param buffer - Target buffer where glyph attributes will be stored.
     * @param offset - Offset of the target buffer.
     * @param glyphData - [[GlyphData]] holding the glyph description.
     * @param corners - Transformed glyph corners.
     * @param weight - Foreground glyph sampling weight.
     * @param bgWeight - Foreground glyph sampling weight.
     * @param mirrored - If `true`, UVs will be mirrored (needed for RTL punctuation).
     * @param style - Currently set [[TextRenderStyle]].
     */
    addToBuffer(buffer: Float32Array, offset: number, glyphData: GlyphData, corners: THREE.Vector3[], weight: number, bgWeight: number, mirrored: boolean, style: TextRenderStyle): void;
    /**
     * Add a previously computed [[TextBufferObject]] to the `TextGeometry`. Extra parameters can
     * be passed to override the passed attribute data.
     *
     * @param textBufferObject - [[TextBufferObject]] containing computed glyphs.
     * @param position - Override position value.
     * @param scale - Override scale value.
     * @param rotation - Override rotation value.
     * @param color - Override color value.
     * @param opacity - Override opacity value.
     * @param bgColor - Override background color value.
     * @param bgOpacity - Override background opacity value.
     *
     * @returns Result of the addition.
     */
    addTextBufferObject(textBufferObject: TextBufferObject, position?: THREE.Vector3, scale?: number, rotation?: number, color?: THREE.Color, opacity?: number, bgColor?: THREE.Color, bgOpacity?: number): boolean;
    /**
     * Adds picking data for glyphs from the specified start until the last glyph added.
     *
     * @param startIdx - First glyph index that this picking data is associated to.
     * @param endIdx - Last glyph index that this picking data is associated to.
     * @param pickingData - Picking data to be added.
     */
    addPickingData(startIdx: number, endIdx: number, pickingData: any): boolean;
    /**
     * Fill the picking results for the pixel with the given screen coordinate. If multiple glyphs
     * are found, the order of the results is unspecified.
     *
     * @param screenPosition - Screen coordinate of picking position.
     * @param pickCallback - Callback to be called for every picked element.
     */
    pick(screenPosition: THREE.Vector2, pickCallback: (pickData: any | undefined) => void): void;
    /**
     * Update the info with the memory footprint caused by objects owned by the `TextGeometry`.
     *
     * @param info - The info object to increment with the values from this `TextGeometry`.
     */
    updateMemoryUsage(info: MemoryUsage): void;
    private resizeBuffers;
}
//# sourceMappingURL=TextGeometry.d.ts.map