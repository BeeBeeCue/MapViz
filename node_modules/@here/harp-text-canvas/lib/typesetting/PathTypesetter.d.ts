import * as THREE from "three";
import { Typesetter, TypesettingParameters } from "./Typesetter";
/**
 * @hidden
 * Parameters passed when placing glyphs using [[PathTypesetter]]'s `arrangeGlyphs` function.
 */
export interface PathTypesettingParameters extends TypesettingParameters {
    /**
     * Path to be followed when arranging glyphs.
     */
    path: THREE.Path | THREE.CurvePath<THREE.Vector2>;
    /**
     * If `true`, text on a path will be placed even when its size its bigger than the path's size.
     */
    pathOverflow: boolean;
}
/**
 * [[Typesetter]] implementation that arranges glyphs alongside a specified path.
 */
export declare class PathTypesetter implements Typesetter {
    private readonly m_tempTransform;
    private readonly m_tempCorners;
    private m_tempLineDirection;
    private m_tempRunDirection;
    private m_tempPixelSize;
    private m_tempPixelBgSize;
    private m_tempScale;
    private m_tempSmallCaps;
    private readonly m_tempPathPosition;
    private m_tempPathLength;
    private m_tempPathOffset;
    private m_currentParams?;
    /**
     * Creates a `PathTypesetter` object.
     *
     * @returns New `PathTypesetter`.
     */
    constructor();
    /**
     * Arranges the specified glyphs using this `PathTypesetter`. Text will be placed into a single
     * bidirectional line that follows the specified path. Characters will be orientated and placed
     * alongside this path following [[TextLayout]]'s [[VerticalAlignment]] and
     * [[HorizontalAlignment]].
     *
     * @param params - Typesetting parameters.
     *
     * @returns If `false`, some error occurred during execution and the output should be dismissed.
     */
    arrangeGlyphs(params: PathTypesettingParameters): boolean;
    private placeLine;
    private placeRun;
}
//# sourceMappingURL=PathTypesetter.d.ts.map