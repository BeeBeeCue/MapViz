"use strict";
/*
 * Copyright (C) 2017-2020 HERE Europe B.V.
 * Licensed under Apache 2.0, see full license in LICENSE
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestTilesDataProvider = exports.TestSingleFileDataProvider = void 0;
require("@here/harp-fetch");
const harp_test_utils_1 = require("@here/harp-test-utils");
const DataProvider_1 = require("../lib/DataProvider");
/**
 * Data provider that loads test tile using [[loadTestResource]].
 */
class TestSingleFileDataProvider extends DataProvider_1.DataProvider {
    /**
     * TestDataProvider constructor
     * @param moduleName - name of the module's directory
     * @param basePath - base path to the test resources
     */
    constructor(moduleName, basePath) {
        super();
        this.moduleName = moduleName;
        this.basePath = basePath;
    }
    ready() {
        return true;
    }
    connect() {
        return Promise.resolve();
    }
    async getTile(_tileKey, _abortSignal) {
        return await harp_test_utils_1.loadTestResource(this.moduleName, this.basePath, "arraybuffer");
    }
    /** @override */ dispose() {
        // Nothing to be done here.
    }
}
exports.TestSingleFileDataProvider = TestSingleFileDataProvider;
/**
 * Data provider that loads test tiles from a specified base URL.
 * Tile's URLs are generated basing on the basePath and requested tileKey.
 *
 * The URL is constructed using the following formula:
 * `${this.basePath}/${tileKey.mortonCode()}.bin`
 */
class TestTilesDataProvider extends DataProvider_1.DataProvider {
    /**
     * Constructs `TestFilesDataProvider` using the provided base path.
     *
     * @param basePath - base path to be used to construct the url to the resource.
     */
    constructor(basePath) {
        super();
        this.basePath = basePath;
    }
    ready() {
        return true;
    }
    connect() {
        return Promise.resolve();
    }
    /**
     * Loads the static test data from given URL and returns them as [[ArrayBufferLike]].
     *
     * @param tileKey - the tile key for the tile to be loaded
     * @param abortSignal - optional AbortSignal to be used by the fetch function
     */
    async getTile(tileKey, abortSignal) {
        const url = `${this.basePath}/${tileKey.mortonCode()}.bin`;
        const resp = await fetch(url, {
            signal: abortSignal
        });
        return await resp.arrayBuffer();
    }
    /** @override */ dispose() {
        // Nothing to be done here.
    }
}
exports.TestTilesDataProvider = TestTilesDataProvider;
//# sourceMappingURL=TestDataProviders.js.map