import { ITiler } from "@here/harp-datasource-protocol";
import { WorkerService, WorkerServiceResponse } from "./WorkerService";
/**
 * An extension to {@link WorkerService}, the `TilerService`
 * implements an asynchronous (message based)
 * service to tile untiled payloads in web workers.
 *
 * @remarks
 * The `TilerService` itself lives in the web
 * worker, and communicates with messages by means of a `ConcurrentWorkerSet` with the
 * application.
 *
 * The `TilerService` registers tile indices (parent tile to be subdivided) by handling a
 * `RegisterIndexRequest`, and can later retrieve tiled payloads from through the `TileRequest`.
 * The data is sent back in form of a {@link WorkerServiceResponse}.
 */
export declare class TilerService extends WorkerService {
    readonly serviceId: string;
    /**
     * Start a `TilerService`.
     *
     * @param serviceId - Service id. Must be unique.
     */
    static start(serviceId: string): TilerService;
    tiler: ITiler;
    /**
     * Set up the `TilerService`. The name of the service must be unique
     *
     * @param serviceId - Service id. Must be unique.
     */
    constructor(serviceId: string);
    /**
     * Handle incoming request messages. Identifies message type and processes the request.
     *
     * @param request - {@link WorkerTilerProtocol} request.
     * @returns A promise which resolves to a {@link WorkerServiceResponse}.
     * @override
     */
    protected handleRequest(request: any): Promise<WorkerServiceResponse>;
    private handleTileRequest;
    private handleRegisterIndexRequest;
    private handleUpdateIndexRequest;
}
//# sourceMappingURL=TilerService.d.ts.map