import { Definitions, ITileDecoder, StyleSet, Theme, TileInfo } from "@here/harp-datasource-protocol";
import { StyleSetOptions } from "@here/harp-datasource-protocol/index-decoder";
import { TileKey, TilingScheme } from "@here/harp-geoutils";
import { CopyrightInfo, CopyrightProvider, DataSource, DataSourceOptions, Tile } from "@here/harp-mapview";
import { ILogger } from "@here/harp-utils";
import { DataProvider } from "./DataProvider";
/**
 * Set of common options for all [[TileDataSource]]s.
 */
export interface TileDataSourceOptions extends DataSourceOptions {
    /**
     * The [[TilingScheme]] the data source is using.
     */
    tilingScheme: TilingScheme;
    /**
     * The [[DataProvider]] to use for downloading the actual data.
     */
    dataProvider: DataProvider;
    /**
     * Optional: Specify [[ITileDecoder]] instance.
     */
    decoder?: ITileDecoder;
    /**
     * Optional name of decoder service class.
     * @see [[ConcurrentDecoderFacade]]
     * @see [[ConcurrentWorkerSet]]
     */
    concurrentDecoderServiceName?: string;
    /**
     * Optional URL for decoder bundle to be loaded into web worker.
     */
    concurrentDecoderScriptUrl?: string;
    /**
     * Optional count of web workers to use with the decoder bundle.
     */
    concurrentDecoderWorkerCount?: number;
    /**
     * Optional, default copyright information of tiles provided by this data source.
     * Implementation should provide this information from the source data if possible.
     */
    copyrightInfo?: CopyrightInfo[];
    /**
     * Optional copyright info provider for tiles provided by this data source. Copyrights from
     * provider are concatenated with default ones from `copyrightInfo`.
     */
    copyrightProvider?: CopyrightProvider;
}
/**
 * Templated factory class to create instances of [[Tile]].
 */
export declare class TileFactory<TileType extends Tile> {
    private readonly m_modelConstructor;
    /**
     * Initialize the factory using the constructor of the element to be called when a [[Tile]] is
     * created.
     *
     * @param m_modelConstructor - Constructor of (subclass of) [[Tile]].
     */
    constructor(m_modelConstructor: new (dataSource: DataSource, tileKey: TileKey) => TileType);
    /**
     * Create an instance of (subclass of) [[Tile]]. The required parameters are passed as arguments
     * to the constructor of [[Tile]].
     *
     * @param dataSource - [[Datasource]] this class belongs to.
     * @param tileKey - Quadtree address of the [[Tile]].
     */
    create(dataSource: TileDataSource<TileType>, tileKey: TileKey): TileType;
}
/**
 * Common base class for the typical [[DataSource]] which uses an [[ITileDecoder]] to decode the
 * tile content asynchronously. The decoder can be passed in as an option, or a default
 * asynchronous one is generated.
 */
export declare class TileDataSource<TileType extends Tile = Tile> extends DataSource {
    private readonly m_tileFactory;
    private readonly m_options;
    protected readonly logger: ILogger;
    protected readonly m_decoder: ITileDecoder;
    private m_isReady;
    private readonly m_unregisterClearTileCache?;
    /**
     * Set up the `TileDataSource`.
     *
     * @param m_tileFactory - Factory to create the [[Tile]] instances.
     * @param m_options - Options specifying the parameters of the [[DataSource]].
     */
    constructor(m_tileFactory: TileFactory<TileType>, m_options: TileDataSourceOptions);
    /** @override */
    dispose(): void;
    /** @override */
    ready(): boolean;
    /**
     * Get the [[ITileDecoder]] of this `ITileDataSource`, which has either been passed in with
     * the options, or has been supplied by the [[ConcurrentDecoderFacade]].
     */
    get decoder(): ITileDecoder;
    /** @override */
    connect(): Promise<void>;
    /** @override */
    setStyleSet(options: StyleSetOptions | StyleSet, definitions?: Definitions, languages?: string[]): void;
    /**
     * Apply the [[Theme]] to this data source.
     *
     * Applies new [[StyleSet]] and definitions from theme only if matching styleset (see
     * `styleSetName` property) is found in `theme`.
     * @override
     */
    setTheme(theme: Theme, languages?: string[]): void;
    /**
     * Get the [[DataProvider]] that has been passed in with the options.
     */
    dataProvider(): DataProvider;
    /** @override */
    getTilingScheme(): TilingScheme;
    /**
     * Create a [[Tile]] and start the asynchronous download of the tile content. The [[Tile]] will
     * be empty, but the download and decoding will be scheduled immediately. [[Tile]] instance is
     * initialized with default copyrights, concatenated with copyrights from copyright provider of
     * this data source.
     *
     * @param tileKey - Quadtree address of the requested tile.
     * @param delayLoad - If true, the Tile will be created, but Tile.load will not be called.
     * @default false.
     * @override
     */
    getTile(tileKey: TileKey, delayLoad?: boolean): TileType | undefined;
    /**
     * Get [[TileInfo]] of a tile.
     *
     * @param tileKey - Quadtree address of the requested tile.
     * @returns A promise which will contain the [[TileInfo]] when resolved.
     */
    getTileInfo(tileKey: TileKey): Promise<TileInfo | undefined>;
}
//# sourceMappingURL=TileDataSource.d.ts.map