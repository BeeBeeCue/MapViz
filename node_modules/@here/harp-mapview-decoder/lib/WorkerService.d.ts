/**
 * Response for {@link WorkerService} procession results.
 */
export interface WorkerServiceResponse {
    /**
     * Response object.
     */
    response: any;
    /**
     * Transfer list containing a list of `ArrayBuffer` which transfer ownership from web worker
     * to UI thread.
     */
    transferList?: ArrayBuffer[];
}
/**
 * Worker Service communication helper.
 *
 * @remarks
 * Listens to Web Worker messages from `entWorkerSet` and implements:
 *  - worker service initialization
 *  - request/response scheme
 *  - error handling.
 *
 * This class should be subclassed to provide concrete like `TileDecoderService`.
 *
 * Communication peer for `ConcurrentWorkerSet`.
 */
export declare abstract class WorkerService {
    readonly serviceId: string;
    private readonly m_pendingRequests;
    /**
     * Sets up the `WorkerService` with the specified name, and starts processing messages.
     *
     * @param serviceId - The service id.
     */
    constructor(serviceId: string);
    /**
     * Destroy the `WorkerService`. Cancels all pending requests ad removes itself from the message
     * queue.
     */
    destroy(): void;
    /**
     * Message handler to be overridden by implementation.
     *
     * @param message - `MessageEvent.data` as received by `WorkerService`.
     */
    protected handleMessage(message: any): void;
    /**
     * Call request handler to be overridden by implementation.
     *
     * @param request - `RequestMessage.request` as received by `WorkerService`.
     */
    protected handleRequest(request: any): Promise<WorkerServiceResponse>;
    /**
     * Central message handler for this service.
     *
     * Responsible for filtering message target and managing request/response sequence.
     *
     * @param message - Message to be dispatched.
     */
    private readonly onMessage;
    /**
     * Safety belt over `handleMessage` for correct exception handling & logging.
     */
    private tryHandleMessage;
    /**
     * Safety belt over `handleRequest` for correct exception handling in promise chain.
     */
    private tryHandleRequest;
    private doSendResponse;
    private cancelAllPendingRequests;
}
//# sourceMappingURL=WorkerService.d.ts.map