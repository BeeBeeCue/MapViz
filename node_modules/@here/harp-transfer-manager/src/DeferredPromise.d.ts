/**
 *
 * DeferredPromise takes an executor function for executing it later, when [[exec]] is called.
 * This class allows wrapping other promises or long running functions for later execution.
 * @internal
 * @hidden
 */
export declare class DeferredPromise<T> {
    private readonly executor;
    /**
     * Internal promise to store the result of the deferred executor function.
     */
    readonly promise: Promise<T>;
    private resolveFunc?;
    private rejectFunc?;
    /**
     * Constructs a new [[DeferredPromise]]
     * @param executor - Async function that should be executed at a later point in time.
     */
    constructor(executor: () => Promise<T>);
    /**
     * When `exec` is called the deferred executor function is executed.
     */
    exec(): void;
}
//# sourceMappingURL=DeferredPromise.d.ts.map