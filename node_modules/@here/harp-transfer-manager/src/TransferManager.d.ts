/** @module
 *
 * This module provides classes to ease downloading URLs. In particular, following redirects,
 * retrying on HTTP errors, and limiting the number of parallel concurrent downloads.
 */
import "@here/harp-fetch";
/**
 * Abstract interface for a transfer manager.
 *
 * Provides functionality for downloading JSON or ArrayBuffers.
 * Implementations typically implement retry on server congestion,
 * limit the maximum amount of parallel downloads or merge duplicate
 * downloads.
 */
export interface ITransferManager {
    /**
     * Downloads a JSON object.
     * @param url - The URL to download
     * @param init - Optional extra parameters for the download.
     */
    downloadJson<T>(url: RequestInfo, init?: RequestInit): Promise<T>;
    /**
     * Downloads a binary object.
     * @param url - The URL to download
     * @param init - Optional extra parameters for the download
     */
    downloadArrayBuffer(url: RequestInfo, init?: RequestInit): Promise<ArrayBuffer>;
    /**
     * Downloads a URL and returns the response.
     * @param url - The URL to download.
     * @param init - Optional extra parameters for the download.
     */
    download(url: RequestInfo, init?: RequestInit): Promise<Response>;
}
/**
 * `TransferManager` for downloading URLs.
 *
 * Features:
 *
 * * Merges JSON downloads, for example, the same URL if requested as JSON will only be downloaded
 *   once.
 * * Limits the amount of parallel downloads, useful when requesting a large amount of URLs that
 *   would otherwise stall the browser.
 * * Retries the downloads with an increasing timeout on HTTP 503 replies.
 *
 * The static method [[instance]] can be used to get a default constructed instance.
 */
export declare class TransferManager implements ITransferManager {
    readonly fetchFunction: typeof fetch;
    readonly maxRetries: number;
    /**
     * The timeout in milliseconds to wait between retries. This timeout is multiplied with the
     * number of retries. First retry waits for 0 ms, second retry for 500 ms, third for 1000 ms and
     * so on.
     */
    static readonly retryTimeout = 500;
    /**
     * The amount of maximum parallel downloads to allow.
     */
    static readonly maxParallelDownloads = 16;
    /**
     * Returns a default instance of [[TransferManager]].
     */
    static instance(): TransferManager;
    private static readonly defaultInstance;
    private static fetchRepeatedly;
    private static waitFor;
    private activeDownloadCount;
    private readonly downloadQueue;
    private readonly activeDownloads;
    /**
     * Constructs a new [[TransferManager]].
     *
     * @param fetchFunction - The default fetch function to use.
     * @param maxRetries - The maximum amount to try to re-fetch a resource.
     */
    constructor(fetchFunction?: typeof fetch, maxRetries?: number);
    /**
     * Downloads a JSON object. Merges downloads of string URLs if requested multiple times.
     *
     * Note: This method merges multiple downloads of the same string URL to
     * only one request. The init parameter is ignored if the download is merged.
     * Call [[download]] instead to download the resource without merging.
     *
     * @param url - The URL or RequestInfo to download
     * @param init - Optional extra parameters for the download.
     */
    downloadJson<T>(url: RequestInfo, init?: RequestInit): Promise<T>;
    /**
     * Downloads a binary object. Merges downloads of string URLS if requested multiple times.
     *
     * Note: This method merges multiple downloads of the same string URL to
     * only one request. The init parameter is ignored if the download is merged.
     * Call [[download]] instead to download the resource without merging.
     *
     * @param url - The URL or RequestInfo to download
     * @param init - Optional extra parameters for the download
     */
    downloadArrayBuffer(url: RequestInfo, init?: RequestInit): Promise<ArrayBuffer>;
    /**
     * Downloads a URL and returns the response.
     *
     * Does not merge multiple requests to the same URL.
     *
     * @param url - The URL or RequestInfo to download.
     * @param init - Optional extra parameters for the download.
     */
    download(url: RequestInfo, init?: RequestInit): Promise<Response>;
    private doDownload;
    private onDownloadDone;
    private execDeferredDownload;
    private downloadAs;
}
//# sourceMappingURL=TransferManager.d.ts.map