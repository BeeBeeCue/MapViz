/**
 * Class that can be used to track long presses on an HTML Element. A long press is a press that
 * lasts a minimum duration (see the [[timeout]] member) while the mouse is not moved more than a
 * certain threshold (see the [[moveThreshold]] member).
 */
export declare class LongPressHandler {
    readonly element: HTMLElement;
    onLongPress: (event: MouseEvent) => void;
    /**
     * How long to wait (in ms) until a press is considered a long press.
     */
    timeout: number;
    /**
     * If the cursor moves more than the given number of pixels, it is not a long-press, but a pan.
     */
    moveThreshold: number;
    /**
     * Button id that should be handled by this event.
     */
    buttonId: number;
    private m_mouseDownEvent?;
    private m_timerId?;
    private m_moveHandlerRegistered;
    private readonly m_boundMouseMoveHandler;
    private readonly m_boundMouseDownHandler;
    private readonly m_boundMouseUpHandler;
    /**
     * Default constructor.
     *
     * @param element - The HTML element to track.
     * @param onLongPress - The callback to call when a long press occurred.
     */
    constructor(element: HTMLElement, onLongPress: (event: MouseEvent) => void);
    /**
     * Removes all events listeners. No more events will be sent.
     */
    dispose(): void;
    private onMousedown;
    private onMouseup;
    private onMouseMove;
    private cancel;
    private cancelTimer;
    private addMouseMoveHandler;
    private removeMouseMoveHandler;
    private onTimeout;
}
//# sourceMappingURL=LongPressHandler.d.ts.map