import "@here/harp-fetch";
import { TileKey, TilingScheme } from "@here/harp-geoutils";
import { DataProvider } from "@here/harp-mapview-decoder";
import { ITransferManager } from "@here/harp-transfer-manager";
export declare enum APIFormat {
    /**
     * Use the REST API format of HERE Vector Tiles Server component version 1.
     *
     * @remarks
     * Documentation:
     *  https://developer.here.com/documentation/vector-tiles-api/dev_guide/index.html
     *
     * Usage:
     *
     *     <OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>/omv
     *
     * If [[OmvRestClientParams.authenticationToken]] is provided, it will be added as HTTP header:
     *
     *     Authorization: Bearer $authenticationToken
     *
     * Format definition:
     * `//http|s://<base-url>/{API version}/{layers}/{projection}/{z}/{x}/{y}/{format}`
     *
     * Default authentication method used: [[AuthenticationTypeBearer]].
     */
    HereV1 = 0,
    /**
     * Use the REST API format of Mapbox Vector Tile API v4.
     *
     * @remarks
     * Usage:
     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`
     *
     * Format definition:
     * `http|s://<base-url>/v4/{map_id}/{z}/{x}/{y}{@2x}.{format}?[style]&access_token={access_token}`
     *
     * Sample URL:
     * `http://a.tiles.mapbox.com/v4/mapbox.mapbox-streets-v7/14/4823/6160.mvt?access_token=your-mapbox-access-token`
     *
     * Default authentication method used: [[AuthenticationTypeAccessToken]].
     */
    MapboxV4 = 1,
    /**
     * Use the REST API format of XYZ Vector Tile API in MVT format.
     *
     * @remarks
     * Usage:
     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`
     *
     * Format definition:
     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`
     *
     * Sample URL:
     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.mvt?access_token=your-xyz-access-token`
     *
     * Default authentication method used: [[AuthenticationTypeAccessToken]].
     */
    XYZMVT = 2,
    /**
     * Use the REST API format of XYZ Vector Tile API in JSON format.
     *
     * @remarks
     * Usage:
     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`
     *
     * Format definition:
     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`
     *
     * Sample URL:
     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.json?access_token=your-xyz-api-key`
     *
     * Default authentication method used: [[AuthenticationTypeAccessToken]].
     */
    XYZJson = 3,
    /**
     * Use the REST API format of XYZ Vector Tile API in OMV format.
     *
     * @remarks
     * Usage:
     * `<OmvRestClientParams.baseUrl>/tiles/herebase.02/<zoom>/<X>/<Y>/omv?access_token=<OmvRestClientParams.authenticationCode>`
     *
     * Format definition:
     * `http|s://<base-url>/tiles/herebase.02/{z}/{x}/{y}/{format}?access_token={access_token}`
     *
     * Sample URL:
     * `https://xyz.api.here.com/tiles/herebase.02/14/2649/6338/omv?access_token=your-xyz-access-token`
     *
     * Default authentication method used: [[AuthenticationTypeAccessToken]].
     */
    XYZOMV = 4,
    /**
     * Use the REST API format of Tomtoms Vector Tile API v1.
     *
     * @remarks
     * Usage:
     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.pbf?key=<OmvRestClientParams.authenticationCode>`
     *
     * Format definition:
     * `<http|https>://<baseURL>/map/<versionNumber>/tile/<layer>/<style>/<zoom>/<X>/<Y>.<format>?key=<apiKey>[&view=<view>][&language=<language>]`
     *
     * Sample URL:
     * `http://api.tomtom.com/map/1/tile/basic/main/0/0/0.pbf?key=<apiKey>`
     *
     * Default authentication method used: [[AuthenticationTypeTomTomV1]].
     */
    TomtomV1 = 5,
    /**
     * Use the REST API format of XYZ Space Vector Tile API in OMV format.
     *
     * @remarks
     * Usage:
     * `<OmvRestClientParams.baseUrl>/hub/spaces/<space-id>/tile/web/<zoom>_<X>_<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`
     *
     * Format definition:
     * `http|s://<base-url>/hub/spaces/{spaceId}/tile/web/{z}_{x}_{y}.mvt?access_token={access_token}`
     *
     * Sample URL:
     * `https://xyz.api.here.com/hub/spaces/your-space-id/tile/web/{z}_{x}_{y}.mvt?access_token=your-access-token`
     *
     * Default authentication method used: [[AuthenticationTypeAccessToken]].
     */
    XYZSpace = 6
}
/**
 * Authentication token/code provider used by [[OmvRestClient]] before each call to currently valid
 * authentication code/token.
 */
export declare type AuthenticationCodeProvider = () => Promise<string>;
export declare enum AuthenticationMethod {
    QueryString = 0,
    AuthorizationHeader = 1
}
export interface AuthenticationMethodInfo {
    method: AuthenticationMethod;
    name?: string;
}
/**
 * Authentication method, where token will be provided as HTTP Header:
 *
 *    Authorization: Bearer $authenticationToken
 */
export declare const AuthenticationTypeBearer: AuthenticationMethodInfo;
/**
 * TomTomV1 API compatible authorization method, where token will be provided as HTTP Header:
 *
 *    Authorization: Bearer $authenticationToken
 */
export declare const AuthenticationTypeTomTomV1: AuthenticationMethodInfo;
export declare const AuthenticationTypeAccessToken: AuthenticationMethodInfo;
export interface OmvRestClientParameters {
    /**
     * `URL` pattern used to fetch tile files.
     *
     * @remarks
     * `URL` with special keywords replaced to retrieve specific tile:
     *  - `{z}` - zoom level of tile, @see {@link @here/harp-geoutils#TileKey.level}
     *  - `{x}` - horizontal coordinate of tile (column number),
     *            see {@link @here/harp-geoutils#TileKey.column}
     *  - `{y}` - vertical coordinate of Tile (row number),
     *            see {@link @here/harp-geoutils#TileKey.row}
     *
     * Examples of `url` patterns:
     * ```
     *   https://my-base-url.com/vector-tiles/{z}/{x}/{y}.mvt
     *   https://xyz.api.here.com/tiles/herebase.02/{z}/{x}/{y}/omv
     *   https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
     * ```
     *
     * Note: To add authentication headers and/or query params, use [[authMethod]], [[urlParams]]
     * properties or embed token directly in `url`.
     *
     * Complete examples:
     * ```
     * // XYZ OSM with authentication using query param
     * {
     *     url: "https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt",
     *     urlParams: {
     *           access_token: accessToken
     *     },
     * }
     * // HERE Vector Tile with authentication using bearer token retrieved by callback
     * {
     *     url: "https://vector.hereapi.com/v2/vectortiles/base/mc/{z}/{x}/{y}/omv",
     *     authenticationMethod: AuthenticationTypeBearer,
     *     authenticationCode: () => getBearerToken()
     * }
     * ```
     */
    url?: string;
    /**
     * The base URL of the REST Tile Service.
     * @see [[APIFormat]] for the definition of `baseUrl`.
     */
    baseUrl?: string;
    /**
     * Authentication code used for the different APIs.
     *
     * @remarks
     * When [[AuthenticationCodeProvider]] is is used as value, the provider is called before each
     * to get currently valid authentication code/token.
     *
     * @see [[APIFormat]] for the query parameter this is used with.
     */
    authenticationCode?: string | AuthenticationCodeProvider;
    /**
     * Specifies [[AuthMethod]] to be used when requesting tiles.
     *
     * @remarks
     * Defaults for each [[APIFormat]] are documented with each format type.
     */
    authenticationMethod?: AuthenticationMethodInfo;
    /**
     * The REST API format to use for the tile path generation, will default to the HERE Vector Tile
     * API.
     */
    apiFormat?: APIFormat;
    /**
     * Tiling scheme is used in some of the APIs, not implemented yet.
     */
    tilingScheme?: TilingScheme;
    /**
     * Transfer Manager to use; creates an own instance if none passed.
     */
    downloadManager?: ITransferManager;
    /**
     * Function to retrieve the Bearer Token
     *
     * @deprecated Please use [[authenticationCode]].
     */
    getBearerToken?: () => Promise<string>;
    /**
     * Array of query parameters to be appended at the end of the url.
     * It is empty by default.
     */
    urlParams?: {
        [key: string]: string;
    };
}
/**
 * REST client supporting getting protobuf OMV Tile from REST-based servers.
 */
export declare class OmvRestClient extends DataProvider {
    readonly params: OmvRestClientParameters;
    private readonly downloadManager;
    private readonly urlParams;
    constructor(params: OmvRestClientParameters);
    /** Overriding abstract method, in this case doing nothing. */
    connect(): Promise<void>;
    /** Overriding abstract method, in this case always returning `true`. */
    ready(): boolean;
    /**
     * Asynchronously fetches a tile from this restful server.
     *
     * @remarks
     * **Note:** If the tile doesn't exist, a successful response with a `404` status code is
     * returned.
     *
     * @example
     * ```typescript
     * const response = layer.getTile(tileKey);
     * if (!response.ok) {
     *     // a network error happened
     *     console.error("Unable to download tile", response.statusText);
     *     return;
     * }
     * if (response.status === 404) {
     *     // 404 -, no data exists at the given tile. Do nothing.
     *     return;
     * }
     *
     * // the response is ok and contains data, access it e.g. as arrayBuffer:
     * const payload = await response.arrayBuffer();
     * ```
     *
     * @param tileKey - The tile key of the tile.
     * @param tileRequestInit - Optional request options to be passed to fetch when downloading a
     * tile.
     * @returns A `Promise` of the HTTP response that contains the payload of the requested tile.
     */
    getTile(tileKey: TileKey, abortSignal?: AbortSignal | undefined): Promise<ArrayBufferLike | {}>;
    /**
     * Destroys this `OmvRestClient`.
     */
    dispose(): void;
    /**
     * Get actual authentication code/token for this request according to configuration.
     */
    private getActualAuthenticationCode;
    /**
     * Get default authentication method basing on apiFormat and other params.
     */
    private getDefaultAuthMethod;
    /**
     * Apply authentication code/token using configured (or default) authentication method.
     *
     * @param url -
     * @param init - request extra data
     * @param authenticationCode - authentication/token to be applied
     * @return new url to be used
     */
    private applyAuthCode;
    /**
     * Get actual tile URL depending on configured API format.
     */
    private dataUrl;
    private addQueryParams;
}
//# sourceMappingURL=OmvRestClient.d.ts.map