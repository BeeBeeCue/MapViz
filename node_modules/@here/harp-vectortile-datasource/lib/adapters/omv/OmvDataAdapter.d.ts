import { Env, MapEnv } from "@here/harp-datasource-protocol/index-decoder";
import { ILogger } from "@here/harp-utils";
import { DataAdapter } from "../../DataAdapter";
import { DecodeInfo } from "../../DecodeInfo";
import { IGeometryProcessor } from "../../IGeometryProcessor";
import { OmvFeatureFilter } from "../../OmvDataFilter";
import { OmvGeometryType } from "../../OmvDecoderDefs";
import { OmvVisitor } from "./OmvData";
import { com } from "./proto/vector_tile";
export declare function createFeatureEnv(layer: com.mapbox.pb.Tile.ILayer, feature: com.mapbox.pb.Tile.IFeature, geometryType: string, storageLevel: number, storageLevelOffset?: number, logger?: ILogger, parent?: Env): MapEnv;
export declare function asGeometryType(feature: com.mapbox.pb.Tile.IFeature | undefined): OmvGeometryType;
/**
 * The class `OmvDataAdapter` converts OMV protobuf geo data
 * to geometries for the given `IGeometryProcessor`.
 */
export declare class OmvDataAdapter implements DataAdapter, OmvVisitor {
    id: string;
    private readonly m_geometryCommands;
    private readonly m_processor;
    private readonly m_logger?;
    private m_dataFilter?;
    private m_tileKey;
    private m_layer;
    roundUpCoordinatesIfNeeded: boolean;
    /**
     * Constructs a new [[OmvProtobufDataAdapter]].
     *
     * @param processor - The [[IGeometryProcessor]] used to process the data.
     * @param dataFilter - The [[OmvFeatureFilter]] used to filter features.
     * @param logger - The [[ILogger]] used to log diagnostic messages.
     */
    constructor(processor: IGeometryProcessor, dataFilter?: OmvFeatureFilter, logger?: ILogger);
    /**
     * The [[OmvFeatureFilter]] used to filter features.
     */
    get dataFilter(): OmvFeatureFilter | undefined;
    /**
     * The [[OmvFeatureFilter]] used to filter features.
     */
    set dataFilter(dataFilter: OmvFeatureFilter | undefined);
    /**
     * Checks that the given data can be processed by this [[OmvProtobufDataAdapter]].
     */
    canProcess(data: ArrayBufferLike | {}): boolean;
    /**
     * Processes the given data payload using this adapter's [[IGeometryProcessor]].
     *
     * @param data - The data payload to process.
     * @param decodeInfo - The [[DecodedInfo]] of the tile to proceess.
     */
    process(data: ArrayBufferLike, decodeInfo: DecodeInfo): void;
    /**
     * Visits the OMV layer.
     *
     * @param layer - The OMV layer to process.
     */
    visitLayer(layer: com.mapbox.pb.Tile.ILayer): boolean;
    /**
     * Visits point features.
     *
     * @param feature - The OMV point features to process.
     */
    visitPointFeature(feature: com.mapbox.pb.Tile.IFeature): void;
    /**
     * Visits the line features.
     *
     * @param feature - The line features to process.
     */
    visitLineFeature(feature: com.mapbox.pb.Tile.IFeature): void;
    /**
     * Visits the polygon features.
     *
     * @param feature - The polygon features to process.
     */
    visitPolygonFeature(feature: com.mapbox.pb.Tile.IFeature): void;
    private get mustRoundUpCoordinates();
}
//# sourceMappingURL=OmvDataAdapter.d.ts.map