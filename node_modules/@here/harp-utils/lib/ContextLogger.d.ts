/**
 * Refinement of `console` interface only for important information i.e `info`, `warn` and `errors`.
 */
export interface ISimpleChannel {
    info(message?: any, ...optionalParams: any[]): void;
    warn(message?: any, ...optionalParams: any[]): void;
    error(message?: any, ...optionalParams: any[]): void;
}
/**
 * Extension of {@link ISimpleChannel} to support contextual logging by adding stack of prefixes.
 */
export interface IContextLogger extends ISimpleChannel {
    /**
     * Push "attribute-like" context.
     */
    pushAttr(name: string): void;
    /**
     * Push "index-like" context.
     *
     * Following log messages will be prefixed with `[index]`.
     */
    pushIndex(index: string | number): void;
    /**
     * Remove current context from top of stack.
     */
    pop(): void;
}
/**
 * Context-aware logger that decorates log message with stack-based prefix, emits `headerMessage`
 * before first actual log message.
 */
export declare class ContextLogger implements IContextLogger {
    readonly m_logger: ISimpleChannel;
    readonly headerMessage: string;
    private readonly context;
    private m_headerLogged;
    /**
     * Construct a context-aware logger that logs to `m_logger`.
     */
    constructor(m_logger: ISimpleChannel, headerMessage: string);
    /**
     * Push "attribute-like" context.
     *
     * Following log messages will be prefixed with `name` or `.name` depending on current context.
     */
    pushAttr(name: string): void;
    /**
     * Push "index-like" context.
     *
     * Following log messages will be prefixed with `[index]`.
     */
    pushIndex(index: string | number): void;
    pop(): void;
    warn: (message: string, ...rest: any[]) => void;
    info: (message: string, ...rest: any[]) => void;
    error: (message: string, ...rest: any[]) => void;
    private createLogMethod;
}
//# sourceMappingURL=ContextLogger.d.ts.map