/**
 * Returns the number of points in circle used for caps.
 *
 * @param lineWidth - Width of line.
 */
export declare function numCirclePoints(lineWidth: number): number;
/**
 * Create a triangle mesh from the given polyline.
 *
 * @param points - Sequence of (x,y,z) coordinates.
 * @param width - The width of the extruded line.
 * @param vertices - The output vertex buffer.
 * @param indices - The output index buffer.
 * @param startWithCircle - `true` if the line should start will a circle.
 * @param endWithCircle - `true` if the line should end with a circle.
 */
export declare function triangulateLine(points: ArrayLike<number>, width: number, vertices: number[], indices: number[], startWithCircle?: boolean, endWithCircle?: boolean): void;
/**
 * Reconstruct the original points of a line from the vertices of the triangulated line.
 *
 * @param inBuffer - Buffer with vertices.
 * @param startOffset - Start index, will differ from `0` if the line has caps.
 * @returns Buffer containing the original points of the triangulated line.
 */
export declare function reconstructLine(inBuffer: Float32Array, startOffset: number): Float32Array;
/**
 * Extract the line width from a triangulated line.
 *
 * @param inBuffer - Array of vertex elements of a triangulated line.
 * @param startIndex - Start index, will differ from `0` if the line has caps.
 */
export declare function reconstructLineWidth(inBuffer: Float32Array, startIndex: number): number;
//# sourceMappingURL=TriangulateLines.d.ts.map