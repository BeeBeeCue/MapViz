import { Projection } from "@here/harp-geoutils";
import * as THREE from "three";
/**
 * Describes vertex attribute parameters of interleaved buffer.
 */
interface VertexAttributeDescriptor {
    name: string;
    itemSize: number;
    offset: number;
}
/**
 * Class that holds the vertex and index attributes for a [[Lines]] object.
 */
export declare class LineGeometry {
    vertices: number[];
    vertexColors: number[];
    indices: number[];
}
/**
 * Creates a [[LineGeometry]] object out of a polyline.
 *
 * @param center - Center of the polyline.
 * @param polyline - Array of `numbers` describing a polyline.
 * @param offsets - Array of `numbers` representing line segment offsets.
 * @param uvs - Array of `numbers` representing texture coordinates.
 * @param colors - Array of `numbers` describing a polyline's colors.
 * @param geometry - [[LineGeometry]] object used to store the vertex and index attributes.
 * @param highPrecision - If `true` will create high-precision vertex information.
 */
export declare function createLineGeometry(center: THREE.Vector3, polyline: ArrayLike<number>, projection: Projection, offsets?: ArrayLike<number>, uvs?: ArrayLike<number>, colors?: ArrayLike<number>, geometry?: LineGeometry, highPrecision?: boolean): LineGeometry;
/**
 * Creates a [[LineGeometry]] object out of a polyline.
 *
 * @param polyline - Array of `numbers` describing a polyline.
 * @param colors - Array of `numbers` describing a polyline's colors.
 * @param geometry - [[LineGeometry]] object used to store the vertex and index attributes.
 */
export declare function createSimpleLineGeometry(polyline: ArrayLike<number>, colors?: ArrayLike<number>, geometry?: LineGeometry): LineGeometry;
/**
 * Class used to render groups (or batches) of width-variable lines (in the same tile).
 */
export declare class LineGroup {
    readonly hasNormalsAndUvs: boolean;
    readonly highPrecision: boolean;
    readonly isSimple: boolean;
    /**
     * Adds all the attribute data needed to a [[BufferGeometry]] object for rendering `Lines`.
     *
     * @param vertices - Array of vertex attributes.
     * @param colors - Array of vertex colors.
     * @param indices - Array of vertex indices.
     * @param geometry - [[BufferGeometry]] object which will store all the `Lines` attribute data.
     * @param hasNormalsAnUvs - Whether vertices have normal and uv coordinates as attributes.
     * @param highPrecision - If `true` will create high-precision vertex information.
     * @param isSimple - `true` to create simple (nonsolid, nonextruded) lines. Defaults to `false`.
     */
    static createGeometry(vertices: ArrayLike<number>, colors: ArrayLike<number>, indices: ArrayLike<number>, geometry: THREE.BufferGeometry, hasNormalsAndUvs?: boolean, highPrecision?: boolean, isSimple?: boolean): THREE.BufferGeometry;
    private readonly m_geometry;
    constructor(hasNormalsAndUvs?: boolean, highPrecision?: boolean, isSimple?: boolean);
    /**
     * Clears the list of line strips.
     */
    clear(): void;
    /**
     * Add the given points to this line group.
     *
     * @param center - World center of the provided points.
     * @param points - Sequence of (x,y,z) coordinates.
     * @param offsets - Sequence of line segment offsets.
     * @param uvs - Sequence of (u,v) texture coordinates.
     * @param colors - Sequence of (r,g,b) color components.
     */
    add(center: THREE.Vector3, points: ArrayLike<number>, projection: Projection, offsets?: ArrayLike<number>, uvs?: ArrayLike<number>, colors?: ArrayLike<number>): this;
    /**
     * Returns the list of vertices.
     */
    get vertices(): number[];
    /**
     * Returns the list of vertex colors.
     */
    get vertexColors(): number[];
    /**
     * Returns the list of indices.
     */
    get indices(): number[];
    /**
     * Returns the list of [[VertexAttributeDescriptor]]s.
     */
    get vertexAttributes(): VertexAttributeDescriptor[];
    /**
     * Returns the vertex attribute stride.
     */
    get stride(): number;
    /**
     * Creates a three.js geometry.
     */
    createGeometry(geometry?: THREE.BufferGeometry): THREE.BufferGeometry;
}
export {};
//# sourceMappingURL=Lines.d.ts.map